document.querySelector('mutation-test-report-app').report = {"files":{"/Users/awright/Projects/uri-template-router/index.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":110,"line":5},"start":{"column":96,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"1","location":{"end":{"column":48,"line":9},"start":{"column":34,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"3","location":{"end":{"column":19,"line":12},"start":{"column":16,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":56,"line":12},"start":{"column":15,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"5","location":{"end":{"column":31,"line":12},"start":{"column":26,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"4","location":{"end":{"column":24,"line":12},"start":{"column":21,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"7","location":{"end":{"column":43,"line":12},"start":{"column":40,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"6","location":{"end":{"column":38,"line":12},"start":{"column":33,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"9","location":{"end":{"column":55,"line":12},"start":{"column":52,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"8","location":{"end":{"column":50,"line":12},"start":{"column":45,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"10","location":{"end":{"column":64,"line":12},"start":{"column":62,"line":12}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"11","location":{"end":{"column":50,"line":13},"start":{"column":15,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"12","location":{"end":{"column":19,"line":13},"start":{"column":16,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"13","location":{"end":{"column":24,"line":13},"start":{"column":21,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"14","location":{"end":{"column":29,"line":13},"start":{"column":26,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"15","location":{"end":{"column":34,"line":13},"start":{"column":31,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"16","location":{"end":{"column":39,"line":13},"start":{"column":36,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"17","location":{"end":{"column":44,"line":13},"start":{"column":41,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"18","location":{"end":{"column":49,"line":13},"start":{"column":46,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"19","location":{"end":{"column":58,"line":13},"start":{"column":56,"line":13}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"20","location":{"end":{"column":70,"line":14},"start":{"column":15,"line":14}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"21","location":{"end":{"column":19,"line":14},"start":{"column":16,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"22","location":{"end":{"column":24,"line":14},"start":{"column":21,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"23","location":{"end":{"column":29,"line":14},"start":{"column":26,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"24","location":{"end":{"column":34,"line":14},"start":{"column":31,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"25","location":{"end":{"column":39,"line":14},"start":{"column":36,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"29","location":{"end":{"column":59,"line":14},"start":{"column":56,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"28","location":{"end":{"column":54,"line":14},"start":{"column":51,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"27","location":{"end":{"column":49,"line":14},"start":{"column":46,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"26","location":{"end":{"column":44,"line":14},"start":{"column":41,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"31","location":{"end":{"column":69,"line":14},"start":{"column":66,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"30","location":{"end":{"column":64,"line":14},"start":{"column":61,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"32","location":{"end":{"column":78,"line":14},"start":{"column":76,"line":14}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"33","location":{"end":{"column":41,"line":15},"start":{"column":15,"line":15}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"34","location":{"end":{"column":49,"line":15},"start":{"column":47,"line":15}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"35","location":{"end":{"column":39,"line":16},"start":{"column":13,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"36","location":{"end":{"column":47,"line":16},"start":{"column":45,"line":16}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"37","location":{"end":{"column":2,"line":21},"start":{"column":27,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"38","location":{"end":{"column":37,"line":20},"start":{"column":31,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"39","location":{"end":{"column":2,"line":26},"start":{"column":26,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"40","location":{"end":{"column":71,"line":25},"start":{"column":9,"line":25}},"mutatorName":"ArithmeticOperator","replacement":"'(?:[' + str.replace(regex_rangesc, '\\\\$&') - ']|%[0-9A-Fa-f]{2})'","status":"Killed"},{"id":"41","location":{"end":{"column":50,"line":25},"start":{"column":9,"line":25}},"mutatorName":"ArithmeticOperator","replacement":"'(?:[' - str.replace(regex_rangesc, '\\\\$&')","status":"Killed"},{"id":"42","location":{"end":{"column":15,"line":25},"start":{"column":9,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"45","location":{"end":{"column":2,"line":37},"start":{"column":62,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"44","location":{"end":{"column":71,"line":25},"start":{"column":51,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"48","location":{"end":{"column":49,"line":29},"start":{"column":5,"line":29}},"mutatorName":"LogicalOperator","replacement":"variableOptions || variableOptions.minLength","status":"Killed"},{"id":"47","location":{"end":{"column":49,"line":29},"start":{"column":5,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"50","location":{"end":{"column":4,"line":33},"start":{"column":10,"line":30}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"51","location":{"end":{"column":23,"line":31},"start":{"column":13,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"49","location":{"end":{"column":3,"line":34},"start":{"column":50,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"46","location":{"end":{"column":49,"line":29},"start":{"column":5,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"53","location":{"end":{"column":23,"line":32},"start":{"column":13,"line":32}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"55","location":{"end":{"column":79,"line":32},"start":{"column":75,"line":32}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"56","location":{"end":{"column":3,"line":36},"start":{"column":7,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"57","location":{"end":{"column":90,"line":35},"start":{"column":10,"line":35}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"58","location":{"end":{"column":31,"line":35},"start":{"column":21,"line":35}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"60","location":{"end":{"column":87,"line":35},"start":{"column":83,"line":35}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"61","location":{"end":{"column":2,"line":41},"start":{"column":33,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"63","location":{"end":{"column":2,"line":51},"start":{"column":68,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"64","location":{"end":{"column":34,"line":50},"start":{"column":17,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"65","location":{"end":{"column":34,"line":50},"start":{"column":17,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"66","location":{"end":{"column":34,"line":50},"start":{"column":17,"line":50}},"mutatorName":"EqualityOperator","replacement":"range !== RANGE.URI","status":"NoCoverage"},{"id":"67","location":{"end":{"column":2,"line":62},"start":{"column":19,"line":53}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"68","location":{"end":{"column":4,"line":54},"start":{"column":2,"line":54}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"69","location":{"end":{"column":22,"line":54},"start":{"column":20,"line":54}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"62","location":{"end":{"column":50,"line":40},"start":{"column":45,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"71","location":{"end":{"column":54,"line":54},"start":{"column":49,"line":54}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"72","location":{"end":{"column":5,"line":55},"start":{"column":2,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"73","location":{"end":{"column":22,"line":55},"start":{"column":20,"line":55}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"75","location":{"end":{"column":52,"line":55},"start":{"column":47,"line":55}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"70","location":{"end":{"column":28,"line":54},"start":{"column":25,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"76","location":{"end":{"column":5,"line":56},"start":{"column":2,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"74","location":{"end":{"column":28,"line":55},"start":{"column":25,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"80","location":{"end":{"column":5,"line":57},"start":{"column":2,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"78","location":{"end":{"column":28,"line":56},"start":{"column":25,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"77","location":{"end":{"column":23,"line":56},"start":{"column":20,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"82","location":{"end":{"column":28,"line":57},"start":{"column":25,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"43","location":{"end":{"column":49,"line":25},"start":{"column":43,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"81","location":{"end":{"column":23,"line":57},"start":{"column":20,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"85","location":{"end":{"column":5,"line":58},"start":{"column":2,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"79","location":{"end":{"column":52,"line":56},"start":{"column":47,"line":56}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"54","location":{"end":{"column":73,"line":32},"start":{"column":25,"line":32}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"86","location":{"end":{"column":23,"line":58},"start":{"column":20,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"90","location":{"end":{"column":5,"line":59},"start":{"column":2,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"89","location":{"end":{"column":54,"line":58},"start":{"column":49,"line":58}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"87","location":{"end":{"column":28,"line":58},"start":{"column":25,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"52","location":{"end":{"column":73,"line":31},"start":{"column":25,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"59","location":{"end":{"column":81,"line":35},"start":{"column":33,"line":35}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"84","location":{"end":{"column":54,"line":57},"start":{"column":49,"line":57}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"96","location":{"end":{"column":5,"line":60},"start":{"column":2,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"91","location":{"end":{"column":23,"line":59},"start":{"column":20,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"92","location":{"end":{"column":28,"line":59},"start":{"column":25,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"94","location":{"end":{"column":53,"line":59},"start":{"column":49,"line":59}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"95","location":{"end":{"column":60,"line":59},"start":{"column":55,"line":59}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"97","location":{"end":{"column":23,"line":60},"start":{"column":20,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"102","location":{"end":{"column":5,"line":61},"start":{"column":2,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"98","location":{"end":{"column":28,"line":60},"start":{"column":25,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"100","location":{"end":{"column":53,"line":60},"start":{"column":49,"line":60}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"101","location":{"end":{"column":59,"line":60},"start":{"column":55,"line":60}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"103","location":{"end":{"column":23,"line":61},"start":{"column":20,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"83","location":{"end":{"column":33,"line":57},"start":{"column":30,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"104","location":{"end":{"column":28,"line":61},"start":{"column":25,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"109","location":{"end":{"column":89,"line":65},"start":{"column":40,"line":65}},"mutatorName":"ArithmeticOperator","replacement":"'[^' + RANGE.URI.replace(regex_rangesc, '\\\\$&') - '%'","status":"RuntimeError"},{"id":"110","location":{"end":{"column":85,"line":65},"start":{"column":40,"line":65}},"mutatorName":"ArithmeticOperator","replacement":"'[^' - RANGE.URI.replace(regex_rangesc, '\\\\$&')","status":"RuntimeError"},{"id":"106","location":{"end":{"column":53,"line":61},"start":{"column":49,"line":61}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"88","location":{"end":{"column":33,"line":58},"start":{"column":30,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"93","location":{"end":{"column":33,"line":59},"start":{"column":30,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"114","location":{"end":{"column":113,"line":65},"start":{"column":90,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"107","location":{"end":{"column":59,"line":61},"start":{"column":55,"line":61}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"116","location":{"end":{"column":2,"line":70},"start":{"column":30,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"117","location":{"end":{"column":3,"line":69},"start":{"column":57,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"108","location":{"end":{"column":113,"line":65},"start":{"column":40,"line":65}},"mutatorName":"ArithmeticOperator","replacement":"'[^' + RANGE.URI.replace(regex_rangesc, '\\\\$&') + '%' - ']|%(?![0-9A-Fa-f]{2})'","status":"Killed"},{"id":"118","location":{"end":{"column":2,"line":80},"start":{"column":68,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"111","location":{"end":{"column":44,"line":65},"start":{"column":40,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"119","location":{"end":{"column":34,"line":79},"start":{"column":17,"line":79}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"122","location":{"end":{"column":2,"line":84},"start":{"column":18,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"123","location":{"end":{"column":2,"line":93},"start":{"column":42,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"120","location":{"end":{"column":34,"line":79},"start":{"column":17,"line":79}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"121","location":{"end":{"column":34,"line":79},"start":{"column":17,"line":79}},"mutatorName":"EqualityOperator","replacement":"range !== RANGE.URI","status":"Killed"},{"id":"125","location":{"end":{"column":33,"line":92},"start":{"column":19,"line":92}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"126","location":{"end":{"column":32,"line":92},"start":{"column":30,"line":92}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"124","location":{"end":{"column":18,"line":88},"start":{"column":16,"line":88}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"99","location":{"end":{"column":33,"line":60},"start":{"column":30,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"128","location":{"end":{"column":47,"line":99},"start":{"column":41,"line":99}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"129","location":{"end":{"column":2,"line":101},"start":{"column":49,"line":99}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"131","location":{"end":{"column":49,"line":103},"start":{"column":41,"line":103}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"130","location":{"end":{"column":55,"line":100},"start":{"column":25,"line":100}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"133","location":{"end":{"column":64,"line":104},"start":{"column":27,"line":104}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"132","location":{"end":{"column":2,"line":105},"start":{"column":51,"line":103}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"135","location":{"end":{"column":36,"line":108},"start":{"column":5,"line":108}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"137","location":{"end":{"column":36,"line":108},"start":{"column":5,"line":108}},"mutatorName":"EqualityOperator","replacement":"typeof uriTemplate === 'string'","status":"Killed"},{"id":"134","location":{"end":{"column":2,"line":110},"start":{"column":65,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"139","location":{"end":{"column":85,"line":108},"start":{"column":54,"line":108}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"138","location":{"end":{"column":36,"line":108},"start":{"column":28,"line":108}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"141","location":{"end":{"column":36,"line":113},"start":{"column":5,"line":113}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"140","location":{"end":{"column":2,"line":115},"start":{"column":65,"line":112}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"105","location":{"end":{"column":33,"line":61},"start":{"column":30,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"143","location":{"end":{"column":36,"line":113},"start":{"column":5,"line":113}},"mutatorName":"EqualityOperator","replacement":"typeof uriTemplate === 'string'","status":"Killed"},{"id":"145","location":{"end":{"column":85,"line":113},"start":{"column":54,"line":113}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"144","location":{"end":{"column":36,"line":113},"start":{"column":28,"line":113}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"146","location":{"end":{"column":2,"line":119},"start":{"column":58,"line":117}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"148","location":{"end":{"column":27,"line":125},"start":{"column":18,"line":125}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"147","location":{"end":{"column":2,"line":123},"start":{"column":58,"line":121}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"149","location":{"end":{"column":23,"line":127},"start":{"column":16,"line":127}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"151","location":{"end":{"column":10,"line":131},"start":{"column":5,"line":131}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"112","location":{"end":{"column":84,"line":65},"start":{"column":78,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"113","location":{"end":{"column":89,"line":65},"start":{"column":86,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"154","location":{"end":{"column":45,"line":131},"start":{"column":28,"line":131}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"153","location":{"end":{"column":10,"line":131},"start":{"column":5,"line":131}},"mutatorName":"BooleanLiteral","replacement":"type","status":"Killed"},{"id":"115","location":{"end":{"column":119,"line":65},"start":{"column":115,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"127","location":{"end":{"column":2,"line":97},"start":{"column":53,"line":95}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"136","location":{"end":{"column":36,"line":108},"start":{"column":5,"line":108}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"142","location":{"end":{"column":36,"line":113},"start":{"column":5,"line":113}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"150","location":{"end":{"column":2,"line":136},"start":{"column":51,"line":130}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"152","location":{"end":{"column":10,"line":131},"start":{"column":5,"line":131}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"156","location":{"end":{"column":24,"line":134},"start":{"column":14,"line":134}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"155","location":{"end":{"column":24,"line":134},"start":{"column":14,"line":134}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"163","location":{"end":{"column":2,"line":142},"start":{"column":34,"line":139}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"165","location":{"end":{"column":39,"line":144},"start":{"column":9,"line":144}},"mutatorName":"ArithmeticOperator","replacement":"'<' + this.route.uriTemplate - '>'","status":"NoCoverage"},{"id":"166","location":{"end":{"column":35,"line":144},"start":{"column":9,"line":144}},"mutatorName":"ArithmeticOperator","replacement":"'<' - this.route.uriTemplate","status":"NoCoverage"},{"id":"167","location":{"end":{"column":12,"line":144},"start":{"column":9,"line":144}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"168","location":{"end":{"column":39,"line":144},"start":{"column":36,"line":144}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"169","location":{"end":{"column":2,"line":227},"start":{"column":49,"line":151}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"170","location":{"end":{"column":34,"line":152},"start":{"column":5,"line":152}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"157","location":{"end":{"column":24,"line":134},"start":{"column":14,"line":134}},"mutatorName":"LogicalOperator","replacement":"open && []","status":"Survived"},{"id":"172","location":{"end":{"column":34,"line":152},"start":{"column":5,"line":152}},"mutatorName":"EqualityOperator","replacement":"typeof uriTemplate === 'string'","status":"Killed"},{"id":"173","location":{"end":{"column":34,"line":152},"start":{"column":26,"line":152}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"174","location":{"end":{"column":91,"line":152},"start":{"column":52,"line":152}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"158","location":{"end":{"column":24,"line":134},"start":{"column":22,"line":134}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"159","location":{"end":{"column":26,"line":135},"start":{"column":15,"line":135}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"177","location":{"end":{"column":30,"line":154},"start":{"column":17,"line":154}},"mutatorName":"LogicalOperator","replacement":"options && {}","status":"Killed"},{"id":"160","location":{"end":{"column":26,"line":135},"start":{"column":15,"line":135}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"162","location":{"end":{"column":26,"line":135},"start":{"column":24,"line":135}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"161","location":{"end":{"column":26,"line":135},"start":{"column":15,"line":135}},"mutatorName":"LogicalOperator","replacement":"close && []","status":"Survived"},{"id":"164","location":{"end":{"column":2,"line":145},"start":{"column":52,"line":143}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"182","location":{"end":{"column":31,"line":160},"start":{"column":29,"line":160}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"171","location":{"end":{"column":34,"line":152},"start":{"column":5,"line":152}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"184","location":{"end":{"column":43,"line":162},"start":{"column":19,"line":162}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"185","location":{"end":{"column":43,"line":162},"start":{"column":19,"line":162}},"mutatorName":"EqualityOperator","replacement":"uri_i <= uriTemplate.length","status":"Killed"},{"id":"186","location":{"end":{"column":43,"line":162},"start":{"column":19,"line":162}},"mutatorName":"EqualityOperator","replacement":"uri_i >= uriTemplate.length","status":"Killed"},{"id":"187","location":{"end":{"column":52,"line":162},"start":{"column":45,"line":162}},"mutatorName":"UpdateOperator","replacement":"uri_i--","status":"Killed"},{"id":"188","location":{"end":{"column":3,"line":200},"start":{"column":53,"line":162}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"189","location":{"end":{"column":15,"line":164},"start":{"column":6,"line":164}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"175","location":{"end":{"column":30,"line":154},"start":{"column":17,"line":154}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"191","location":{"end":{"column":15,"line":164},"start":{"column":6,"line":164}},"mutatorName":"EqualityOperator","replacement":"chr !== '%'","status":"Killed"},{"id":"176","location":{"end":{"column":30,"line":154},"start":{"column":17,"line":154}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"178","location":{"end":{"column":55,"line":155},"start":{"column":20,"line":155}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"194","location":{"end":{"column":68,"line":167},"start":{"column":7,"line":167}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"195","location":{"end":{"column":68,"line":167},"start":{"column":7,"line":167}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"196","location":{"end":{"column":43,"line":167},"start":{"column":36,"line":167}},"mutatorName":"ArithmeticOperator","replacement":"uri_i - 3","status":"NoCoverage"},{"id":"197","location":{"end":{"column":5,"line":170},"start":{"column":69,"line":167}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"198","location":{"end":{"column":55,"line":168},"start":{"column":12,"line":168}},"mutatorName":"ArithmeticOperator","replacement":"uriTemplate[uri_i + 1] - uriTemplate[uri_i + 2]","status":"NoCoverage"},{"id":"199","location":{"end":{"column":31,"line":168},"start":{"column":24,"line":168}},"mutatorName":"ArithmeticOperator","replacement":"uri_i - 1","status":"NoCoverage"},{"id":"200","location":{"end":{"column":54,"line":168},"start":{"column":47,"line":168}},"mutatorName":"ArithmeticOperator","replacement":"uri_i - 2","status":"NoCoverage"},{"id":"201","location":{"end":{"column":5,"line":172},"start":{"column":9,"line":170}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"202","location":{"end":{"column":106,"line":171},"start":{"column":21,"line":171}},"mutatorName":"ArithmeticOperator","replacement":"'Invalid pct-encoded sequence ' - JSON.stringify(uriTemplate.substring(uri_i, uri_i + 3))","status":"NoCoverage"},{"id":"203","location":{"end":{"column":52,"line":171},"start":{"column":21,"line":171}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"204","location":{"end":{"column":104,"line":171},"start":{"column":97,"line":171}},"mutatorName":"ArithmeticOperator","replacement":"uri_i - 3","status":"NoCoverage"},{"id":"205","location":{"end":{"column":14,"line":174},"start":{"column":6,"line":174}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"179","location":{"end":{"column":55,"line":155},"start":{"column":20,"line":155}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"206","location":{"end":{"column":14,"line":174},"start":{"column":6,"line":174}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"207","location":{"end":{"column":14,"line":174},"start":{"column":6,"line":174}},"mutatorName":"EqualityOperator","replacement":"chr != '{'","status":"Killed"},{"id":"208","location":{"end":{"column":14,"line":174},"start":{"column":11,"line":174}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"209","location":{"end":{"column":4,"line":194},"start":{"column":15,"line":174}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"210","location":{"end":{"column":40,"line":175},"start":{"column":37,"line":175}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"212","location":{"end":{"column":15,"line":176},"start":{"column":7,"line":176}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"211","location":{"end":{"column":49,"line":175},"start":{"column":42,"line":175}},"mutatorName":"ArithmeticOperator","replacement":"uri_i - 2","status":"Killed"},{"id":"180","location":{"end":{"column":55,"line":155},"start":{"column":20,"line":155}},"mutatorName":"EqualityOperator","replacement":"this.options.matchValue === undefined","status":"Survived"},{"id":"215","location":{"end":{"column":15,"line":176},"start":{"column":7,"line":176}},"mutatorName":"EqualityOperator","replacement":"endpos >= 0","status":"Killed"},{"id":"181","location":{"end":{"column":37,"line":159},"start":{"column":35,"line":159}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"217","location":{"end":{"column":51,"line":177},"start":{"column":44,"line":177}},"mutatorName":"ArithmeticOperator","replacement":"uri_i - 1","status":"Killed"},{"id":"218","location":{"end":{"column":65,"line":181},"start":{"column":63,"line":181}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"219","location":{"end":{"column":16,"line":183},"start":{"column":7,"line":183}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"183","location":{"end":{"column":25,"line":161},"start":{"column":23,"line":161}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"221","location":{"end":{"column":16,"line":183},"start":{"column":7,"line":183}},"mutatorName":"BooleanLiteral","replacement":"operator","status":"Killed"},{"id":"190","location":{"end":{"column":15,"line":164},"start":{"column":6,"line":164}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"192","location":{"end":{"column":15,"line":164},"start":{"column":12,"line":164}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"193","location":{"end":{"column":4,"line":173},"start":{"column":16,"line":164}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"216","location":{"end":{"column":94,"line":176},"start":{"column":33,"line":176}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"214","location":{"end":{"column":15,"line":176},"start":{"column":7,"line":176}},"mutatorName":"EqualityOperator","replacement":"endpos <= 0","status":"Survived"},{"id":"227","location":{"end":{"column":36,"line":194},"start":{"column":12,"line":194}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"213","location":{"end":{"column":15,"line":176},"start":{"column":7,"line":176}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"228","location":{"end":{"column":4,"line":197},"start":{"column":37,"line":194}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"229","location":{"end":{"column":47,"line":195},"start":{"column":7,"line":195}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"231","location":{"end":{"column":47,"line":195},"start":{"column":7,"line":195}},"mutatorName":"EqualityOperator","replacement":"typeof tokens[tokens.length - 1] != 'string'","status":"Killed"},{"id":"226","location":{"end":{"column":36,"line":194},"start":{"column":12,"line":194}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"220","location":{"end":{"column":16,"line":183},"start":{"column":7,"line":183}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"234","location":{"end":{"column":71,"line":195},"start":{"column":56,"line":195}},"mutatorName":"ArithmeticOperator","replacement":"tokens.length + 1","status":"Killed"},{"id":"223","location":{"end":{"column":81,"line":184},"start":{"column":21,"line":184}},"mutatorName":"ArithmeticOperator","replacement":"'Unknown expression operator: ' - JSON.stringify(operatorChar)","status":"Survived"},{"id":"224","location":{"end":{"column":52,"line":184},"start":{"column":21,"line":184}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"235","location":{"end":{"column":4,"line":199},"start":{"column":8,"line":197}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"222","location":{"end":{"column":5,"line":185},"start":{"column":17,"line":183}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"239","location":{"end":{"column":15,"line":205},"start":{"column":6,"line":205}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"225","location":{"end":{"column":5,"line":191},"start":{"column":53,"line":187}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"241","location":{"end":{"column":3,"line":214},"start":{"column":34,"line":207}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"242","location":{"end":{"column":83,"line":208},"start":{"column":6,"line":208}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"243","location":{"end":{"column":83,"line":208},"start":{"column":6,"line":208}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"244","location":{"end":{"column":82,"line":208},"start":{"column":19,"line":208}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"245","location":{"end":{"column":82,"line":208},"start":{"column":28,"line":208}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"246","location":{"end":{"column":82,"line":208},"start":{"column":28,"line":208}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"232","location":{"end":{"column":36,"line":195},"start":{"column":21,"line":195}},"mutatorName":"ArithmeticOperator","replacement":"tokens.length + 1","status":"Survived"},{"id":"230","location":{"end":{"column":47,"line":195},"start":{"column":7,"line":195}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"248","location":{"end":{"column":4,"line":211},"start":{"column":84,"line":208}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"233","location":{"end":{"column":47,"line":195},"start":{"column":39,"line":195}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"236","location":{"end":{"column":63,"line":198},"start":{"column":20,"line":198}},"mutatorName":"ArithmeticOperator","replacement":"'Unexpected character ' - JSON.stringify(chr)","status":"Survived"},{"id":"237","location":{"end":{"column":43,"line":198},"start":{"column":20,"line":198}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"238","location":{"end":{"column":3,"line":206},"start":{"column":36,"line":204}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"240","location":{"end":{"column":15,"line":205},"start":{"column":6,"line":205}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"247","location":{"end":{"column":82,"line":208},"start":{"column":28,"line":208}},"mutatorName":"LogicalOperator","replacement":"final || (Array.isArray(final) ? final.length : final)","status":"Survived"},{"id":"256","location":{"end":{"column":16,"line":212},"start":{"column":11,"line":212}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"257","location":{"end":{"column":30,"line":216},"start":{"column":5,"line":216}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"258","location":{"end":{"column":30,"line":216},"start":{"column":5,"line":216}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"259","location":{"end":{"column":30,"line":216},"start":{"column":5,"line":216}},"mutatorName":"LogicalOperator","replacement":"options || options.parent","status":"Killed"},{"id":"260","location":{"end":{"column":3,"line":226},"start":{"column":31,"line":216}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"250","location":{"end":{"column":72,"line":209},"start":{"column":43,"line":209}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"249","location":{"end":{"column":86,"line":209},"start":{"column":33,"line":209}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"262","location":{"end":{"column":37,"line":218},"start":{"column":6,"line":218}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"263","location":{"end":{"column":37,"line":218},"start":{"column":6,"line":218}},"mutatorName":"EqualityOperator","replacement":"typeof options.parent != 'object'","status":"Killed"},{"id":"264","location":{"end":{"column":37,"line":218},"start":{"column":29,"line":218}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"266","location":{"end":{"column":44,"line":220},"start":{"column":12,"line":220}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"267","location":{"end":{"column":44,"line":220},"start":{"column":12,"line":220}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"268","location":{"end":{"column":44,"line":220},"start":{"column":12,"line":220}},"mutatorName":"EqualityOperator","replacement":"typeof options.parent !== 'string'","status":"NoCoverage"},{"id":"269","location":{"end":{"column":44,"line":220},"start":{"column":36,"line":220}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"270","location":{"end":{"column":4,"line":222},"start":{"column":45,"line":220}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"271","location":{"end":{"column":4,"line":224},"start":{"column":8,"line":222}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"272","location":{"end":{"column":45,"line":223},"start":{"column":20,"line":223}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"273","location":{"end":{"column":45,"line":225},"start":{"column":23,"line":225}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"274","location":{"end":{"column":2,"line":231},"start":{"column":49,"line":228}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"275","location":{"end":{"column":28,"line":229},"start":{"column":5,"line":229}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"251","location":{"end":{"column":72,"line":209},"start":{"column":43,"line":209}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"252","location":{"end":{"column":72,"line":209},"start":{"column":43,"line":209}},"mutatorName":"LogicalOperator","replacement":"final || Array.isArray(final)","status":"Survived"},{"id":"277","location":{"end":{"column":28,"line":229},"start":{"column":5,"line":229}},"mutatorName":"EqualityOperator","replacement":"typeof params == 'object'","status":"Killed"},{"id":"279","location":{"end":{"column":94,"line":229},"start":{"column":46,"line":229}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"278","location":{"end":{"column":28,"line":229},"start":{"column":20,"line":229}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"280","location":{"end":{"column":49,"line":230},"start":{"column":26,"line":230}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"281","location":{"end":{"column":59,"line":230},"start":{"column":57,"line":230}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"283","location":{"end":{"column":49,"line":233},"start":{"column":26,"line":233}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"282","location":{"end":{"column":2,"line":234},"start":{"column":53,"line":232}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"284","location":{"end":{"column":59,"line":233},"start":{"column":57,"line":233}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"286","location":{"end":{"column":71,"line":236},"start":{"column":17,"line":236}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"287","location":{"end":{"column":42,"line":236},"start":{"column":18,"line":236}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"288","location":{"end":{"column":42,"line":236},"start":{"column":18,"line":236}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"289","location":{"end":{"column":42,"line":236},"start":{"column":18,"line":236}},"mutatorName":"LogicalOperator","replacement":"this.fsm && this.toFSM()","status":"NoCoverage"},{"id":"290","location":{"end":{"column":70,"line":236},"start":{"column":44,"line":236}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"291","location":{"end":{"column":70,"line":236},"start":{"column":44,"line":236}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"292","location":{"end":{"column":70,"line":236},"start":{"column":44,"line":236}},"mutatorName":"LogicalOperator","replacement":"other.fsm && other.toFSM()","status":"NoCoverage"},{"id":"253","location":{"end":{"column":86,"line":209},"start":{"column":84,"line":209}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"294","location":{"end":{"column":2,"line":257},"start":{"column":41,"line":241}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"295","location":{"end":{"column":3,"line":254},"start":{"column":66,"line":246}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"296","location":{"end":{"column":33,"line":248},"start":{"column":6,"line":248}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"297","location":{"end":{"column":33,"line":248},"start":{"column":6,"line":248}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"298","location":{"end":{"column":33,"line":248},"start":{"column":6,"line":248}},"mutatorName":"EqualityOperator","replacement":"typeof expression != 'string'","status":"Killed"},{"id":"299","location":{"end":{"column":33,"line":248},"start":{"column":25,"line":248}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"300","location":{"end":{"column":4,"line":252},"start":{"column":34,"line":248}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"254","location":{"end":{"column":38,"line":210},"start":{"column":34,"line":210}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"255","location":{"end":{"column":4,"line":213},"start":{"column":8,"line":211}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"261","location":{"end":{"column":37,"line":218},"start":{"column":6,"line":218}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"265","location":{"end":{"column":4,"line":220},"start":{"column":38,"line":218}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"304","location":{"end":{"column":2,"line":267},"start":{"column":45,"line":258}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"306","location":{"end":{"column":31,"line":260},"start":{"column":6,"line":260}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"305","location":{"end":{"column":3,"line":265},"start":{"column":53,"line":259}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"276","location":{"end":{"column":28,"line":229},"start":{"column":5,"line":229}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"307","location":{"end":{"column":31,"line":260},"start":{"column":6,"line":260}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"308","location":{"end":{"column":31,"line":260},"start":{"column":6,"line":260}},"mutatorName":"EqualityOperator","replacement":"typeof segment !== 'string'","status":"Killed"},{"id":"309","location":{"end":{"column":31,"line":260},"start":{"column":23,"line":260}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"311","location":{"end":{"column":4,"line":264},"start":{"column":8,"line":262}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"310","location":{"end":{"column":4,"line":262},"start":{"column":32,"line":260}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"312","location":{"end":{"column":12,"line":265},"start":{"column":10,"line":265}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"313","location":{"end":{"column":37,"line":266},"start":{"column":20,"line":266}},"mutatorName":"ArithmeticOperator","replacement":"'^' + regex_str - '$'","status":"Killed"},{"id":"314","location":{"end":{"column":33,"line":266},"start":{"column":20,"line":266}},"mutatorName":"ArithmeticOperator","replacement":"'^' - regex_str","status":"Killed"},{"id":"293","location":{"end":{"column":2,"line":240},"start":{"column":43,"line":238}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"285","location":{"end":{"column":2,"line":237},"start":{"column":55,"line":235}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"318","location":{"end":{"column":2,"line":298},"start":{"column":46,"line":268}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"319","location":{"end":{"column":11,"line":271},"start":{"column":5,"line":271}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"321","location":{"end":{"column":11,"line":271},"start":{"column":5,"line":271}},"mutatorName":"BooleanLiteral","replacement":"match","status":"Killed"},{"id":"302","location":{"end":{"column":97,"line":251},"start":{"column":38,"line":251}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"301","location":{"end":{"column":98,"line":251},"start":{"column":34,"line":251}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"322","location":{"end":{"column":35,"line":275},"start":{"column":15,"line":275}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"323","location":{"end":{"column":35,"line":275},"start":{"column":15,"line":275}},"mutatorName":"EqualityOperator","replacement":"i <= this.tokens.length","status":"Killed"},{"id":"324","location":{"end":{"column":35,"line":275},"start":{"column":15,"line":275}},"mutatorName":"EqualityOperator","replacement":"i >= this.tokens.length","status":"Killed"},{"id":"303","location":{"end":{"column":85,"line":251},"start":{"column":77,"line":251}},"mutatorName":"ArithmeticOperator","replacement":"offset - v","status":"Survived"},{"id":"325","location":{"end":{"column":40,"line":275},"start":{"column":37,"line":275}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"326","location":{"end":{"column":3,"line":296},"start":{"column":41,"line":275}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"328","location":{"end":{"column":33,"line":278},"start":{"column":6,"line":278}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"327","location":{"end":{"column":33,"line":278},"start":{"column":6,"line":278}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"329","location":{"end":{"column":33,"line":278},"start":{"column":6,"line":278}},"mutatorName":"EqualityOperator","replacement":"typeof segment !== 'string'","status":"Killed"},{"id":"330","location":{"end":{"column":33,"line":278},"start":{"column":25,"line":278}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"332","location":{"end":{"column":45,"line":279},"start":{"column":16,"line":279}},"mutatorName":"EqualityOperator","replacement":"j <= segment.variableList.length","status":"Killed"},{"id":"331","location":{"end":{"column":45,"line":279},"start":{"column":16,"line":279}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"334","location":{"end":{"column":50,"line":279},"start":{"column":47,"line":279}},"mutatorName":"UpdateOperator","replacement":"j--","status":"Killed"},{"id":"333","location":{"end":{"column":45,"line":279},"start":{"column":16,"line":279}},"mutatorName":"EqualityOperator","replacement":"j >= segment.variableList.length","status":"Killed"},{"id":"335","location":{"end":{"column":4,"line":295},"start":{"column":51,"line":279}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"338","location":{"end":{"column":32,"line":282},"start":{"column":7,"line":282}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"339","location":{"end":{"column":32,"line":282},"start":{"column":7,"line":282}},"mutatorName":"EqualityOperator","replacement":"typeof value !== 'string'","status":"Killed"},{"id":"340","location":{"end":{"column":32,"line":282},"start":{"column":24,"line":282}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"337","location":{"end":{"column":32,"line":282},"start":{"column":7,"line":282}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"341","location":{"end":{"column":5,"line":294},"start":{"column":33,"line":282}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"342","location":{"end":{"column":39,"line":283},"start":{"column":8,"line":283}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"336","location":{"end":{"column":32,"line":281},"start":{"column":24,"line":281}},"mutatorName":"UpdateOperator","replacement":"offset--","status":"Killed"},{"id":"343","location":{"end":{"column":39,"line":283},"start":{"column":8,"line":283}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"344","location":{"end":{"column":6,"line":291},"start":{"column":40,"line":283}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"348","location":{"end":{"column":176,"line":287},"start":{"column":85,"line":287}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"349","location":{"end":{"column":164,"line":287},"start":{"column":111,"line":287}},"mutatorName":"ArithmeticOperator","replacement":"'^' + regex_escape(segment.variableList[j].varname) - '='","status":"Killed"},{"id":"350","location":{"end":{"column":160,"line":287},"start":{"column":111,"line":287}},"mutatorName":"ArithmeticOperator","replacement":"'^' - regex_escape(segment.variableList[j].varname)","status":"Killed"},{"id":"351","location":{"end":{"column":114,"line":287},"start":{"column":111,"line":287}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"352","location":{"end":{"column":164,"line":287},"start":{"column":161,"line":287}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"353","location":{"end":{"column":170,"line":287},"start":{"column":166,"line":287}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"354","location":{"end":{"column":175,"line":287},"start":{"column":173,"line":287}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"355","location":{"end":{"column":7,"line":290},"start":{"column":11,"line":288}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"356","location":{"end":{"column":19,"line":291},"start":{"column":14,"line":291}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"357","location":{"end":{"column":19,"line":291},"start":{"column":14,"line":291}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"317","location":{"end":{"column":42,"line":266},"start":{"column":39,"line":266}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"315","location":{"end":{"column":23,"line":266},"start":{"column":20,"line":266}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"359","location":{"end":{"column":2,"line":312},"start":{"column":48,"line":301}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"316","location":{"end":{"column":37,"line":266},"start":{"column":34,"line":266}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"358","location":{"end":{"column":6,"line":293},"start":{"column":20,"line":291}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"360","location":{"end":{"column":37,"line":302},"start":{"column":5,"line":302}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"364","location":{"end":{"column":95,"line":302},"start":{"column":55,"line":302}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"362","location":{"end":{"column":37,"line":302},"start":{"column":5,"line":302}},"mutatorName":"EqualityOperator","replacement":"typeof operatorChar === 'string'","status":"Killed"},{"id":"365","location":{"end":{"column":29,"line":303},"start":{"column":5,"line":303}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"363","location":{"end":{"column":37,"line":302},"start":{"column":29,"line":302}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"368","location":{"end":{"column":96,"line":303},"start":{"column":47,"line":303}},"mutatorName":"ArithmeticOperator","replacement":"'Unknown operator: ' - JSON.stringify(operatorChar)","status":"NoCoverage"},{"id":"369","location":{"end":{"column":67,"line":303},"start":{"column":47,"line":303}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"367","location":{"end":{"column":29,"line":303},"start":{"column":5,"line":303}},"mutatorName":"BooleanLiteral","replacement":"operators[operatorChar]","status":"Killed"},{"id":"371","location":{"end":{"column":30,"line":305},"start":{"column":6,"line":305}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"320","location":{"end":{"column":11,"line":271},"start":{"column":5,"line":271}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"373","location":{"end":{"column":30,"line":305},"start":{"column":6,"line":305}},"mutatorName":"BooleanLiteral","replacement":"v instanceof Variable","status":"Killed"},{"id":"374","location":{"end":{"column":107,"line":305},"start":{"column":48,"line":305}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"375","location":{"end":{"column":2,"line":326},"start":{"column":57,"line":313}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"376","location":{"end":{"column":63,"line":316},"start":{"column":61,"line":316}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"377","location":{"end":{"column":14,"line":318},"start":{"column":5,"line":318}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"345","location":{"end":{"column":38,"line":285},"start":{"column":9,"line":285}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"346","location":{"end":{"column":38,"line":285},"start":{"column":9,"line":285}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"379","location":{"end":{"column":14,"line":318},"start":{"column":5,"line":318}},"mutatorName":"BooleanLiteral","replacement":"operator","status":"Killed"},{"id":"381","location":{"end":{"column":75,"line":319},"start":{"column":19,"line":319}},"mutatorName":"ArithmeticOperator","replacement":"'Unknown expression operator: ' - JSON.stringify(operator)","status":"NoCoverage"},{"id":"382","location":{"end":{"column":50,"line":319},"start":{"column":19,"line":319}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"383","location":{"end":{"column":73,"line":324},"start":{"column":9,"line":324}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"347","location":{"end":{"column":7,"line":288},"start":{"column":39,"line":285}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"384","location":{"end":{"column":2,"line":340},"start":{"column":58,"line":327}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"385","location":{"end":{"column":11,"line":329},"start":{"column":5,"line":329}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"386","location":{"end":{"column":11,"line":329},"start":{"column":5,"line":329}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"387","location":{"end":{"column":3,"line":336},"start":{"column":12,"line":329}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"388","location":{"end":{"column":62,"line":330},"start":{"column":41,"line":330}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"389","location":{"end":{"column":99,"line":330},"start":{"column":73,"line":330}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"391","location":{"end":{"column":98,"line":330},"start":{"column":79,"line":330}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"392","location":{"end":{"column":98,"line":330},"start":{"column":79,"line":330}},"mutatorName":"EqualityOperator","replacement":"typeof v !== 'string'","status":"Killed"},{"id":"393","location":{"end":{"column":98,"line":330},"start":{"column":90,"line":330}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"361","location":{"end":{"column":37,"line":302},"start":{"column":5,"line":302}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"395","location":{"end":{"column":19,"line":331},"start":{"column":6,"line":331}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"390","location":{"end":{"column":98,"line":330},"start":{"column":79,"line":330}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"366","location":{"end":{"column":29,"line":303},"start":{"column":5,"line":303}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"397","location":{"end":{"column":60,"line":332},"start":{"column":11,"line":332}},"mutatorName":"ArithmeticOperator","replacement":"operator.prefix - values.join(operator.separator)","status":"Killed"},{"id":"396","location":{"end":{"column":4,"line":333},"start":{"column":20,"line":331}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"400","location":{"end":{"column":3,"line":339},"start":{"column":7,"line":336}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"370","location":{"end":{"column":3,"line":306},"start":{"column":34,"line":304}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"399","location":{"end":{"column":13,"line":334},"start":{"column":11,"line":334}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"403","location":{"end":{"column":33,"line":338},"start":{"column":10,"line":338}},"mutatorName":"ArithmeticOperator","replacement":"'{' - this.operatorChar","status":"Killed"},{"id":"402","location":{"end":{"column":64,"line":338},"start":{"column":10,"line":338}},"mutatorName":"ArithmeticOperator","replacement":"'{' + this.operatorChar - this.variableList.toString()","status":"Killed"},{"id":"401","location":{"end":{"column":70,"line":338},"start":{"column":10,"line":338}},"mutatorName":"ArithmeticOperator","replacement":"'{' + this.operatorChar + this.variableList.toString() - '}'","status":"Killed"},{"id":"372","location":{"end":{"column":30,"line":305},"start":{"column":6,"line":305}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"405","location":{"end":{"column":70,"line":338},"start":{"column":67,"line":338}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"404","location":{"end":{"column":13,"line":338},"start":{"column":10,"line":338}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"406","location":{"end":{"column":2,"line":357},"start":{"column":65,"line":341}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"407","location":{"end":{"column":18,"line":343},"start":{"column":16,"line":343}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"408","location":{"end":{"column":41,"line":344},"start":{"column":15,"line":344}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"409","location":{"end":{"column":41,"line":344},"start":{"column":15,"line":344}},"mutatorName":"EqualityOperator","replacement":"i <= this.variableList.length","status":"Killed"},{"id":"410","location":{"end":{"column":41,"line":344},"start":{"column":15,"line":344}},"mutatorName":"EqualityOperator","replacement":"i >= this.variableList.length","status":"Killed"},{"id":"411","location":{"end":{"column":46,"line":344},"start":{"column":43,"line":344}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"412","location":{"end":{"column":3,"line":355},"start":{"column":47,"line":344}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"414","location":{"end":{"column":25,"line":345},"start":{"column":6,"line":345}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"378","location":{"end":{"column":14,"line":318},"start":{"column":5,"line":318}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"417","location":{"end":{"column":10,"line":345},"start":{"column":6,"line":345}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"419","location":{"end":{"column":4,"line":348},"start":{"column":26,"line":345}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"418","location":{"end":{"column":10,"line":345},"start":{"column":6,"line":345}},"mutatorName":"EqualityOperator","replacement":"i != 0","status":"Killed"},{"id":"420","location":{"end":{"column":100,"line":346},"start":{"column":22,"line":346}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"421","location":{"end":{"column":33,"line":348},"start":{"column":12,"line":348}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"423","location":{"end":{"column":33,"line":348},"start":{"column":12,"line":348}},"mutatorName":"LogicalOperator","replacement":"i > 0 || this.separator","status":"Killed"},{"id":"394","location":{"end":{"column":19,"line":331},"start":{"column":6,"line":331}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"424","location":{"end":{"column":15,"line":348},"start":{"column":12,"line":348}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"380","location":{"end":{"column":3,"line":320},"start":{"column":15,"line":318}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"426","location":{"end":{"column":15,"line":348},"start":{"column":12,"line":348}},"mutatorName":"EqualityOperator","replacement":"i >= 0","status":"Killed"},{"id":"427","location":{"end":{"column":15,"line":348},"start":{"column":12,"line":348}},"mutatorName":"EqualityOperator","replacement":"i <= 0","status":"Killed"},{"id":"429","location":{"end":{"column":103,"line":349},"start":{"column":22,"line":349}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"430","location":{"end":{"column":4,"line":353},"start":{"column":8,"line":351}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"431","location":{"end":{"column":2,"line":372},"start":{"column":50,"line":358}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"432","location":{"end":{"column":16,"line":359},"start":{"column":14,"line":359}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"428","location":{"end":{"column":4,"line":351},"start":{"column":34,"line":348}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"434","location":{"end":{"column":16,"line":360},"start":{"column":5,"line":360}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"398","location":{"end":{"column":4,"line":335},"start":{"column":8,"line":333}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"435","location":{"end":{"column":3,"line":362},"start":{"column":17,"line":360}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"436","location":{"end":{"column":41,"line":363},"start":{"column":15,"line":363}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"437","location":{"end":{"column":41,"line":363},"start":{"column":15,"line":363}},"mutatorName":"EqualityOperator","replacement":"i <= this.variableList.length","status":"Killed"},{"id":"413","location":{"end":{"column":25,"line":345},"start":{"column":6,"line":345}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"439","location":{"end":{"column":46,"line":363},"start":{"column":43,"line":363}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"438","location":{"end":{"column":41,"line":363},"start":{"column":15,"line":363}},"mutatorName":"EqualityOperator","replacement":"i >= this.variableList.length","status":"Killed"},{"id":"440","location":{"end":{"column":3,"line":369},"start":{"column":47,"line":363}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"416","location":{"end":{"column":10,"line":345},"start":{"column":6,"line":345}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"441","location":{"end":{"column":27,"line":364},"start":{"column":6,"line":364}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"415","location":{"end":{"column":25,"line":345},"start":{"column":6,"line":345}},"mutatorName":"LogicalOperator","replacement":"i == 0 || this.prefix","status":"Survived"},{"id":"443","location":{"end":{"column":27,"line":364},"start":{"column":6,"line":364}},"mutatorName":"LogicalOperator","replacement":"i > 0 || this.separator","status":"Killed"},{"id":"444","location":{"end":{"column":9,"line":364},"start":{"column":6,"line":364}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"446","location":{"end":{"column":9,"line":364},"start":{"column":6,"line":364}},"mutatorName":"EqualityOperator","replacement":"i >= 0","status":"Killed"},{"id":"449","location":{"end":{"column":96,"line":365},"start":{"column":13,"line":365}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' + regex_escape(this.separator) + this.variableList[i].toRegex().source - ')?'","status":"NoCoverage"},{"id":"450","location":{"end":{"column":89,"line":365},"start":{"column":13,"line":365}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' + regex_escape(this.separator) - this.variableList[i].toRegex().source","status":"NoCoverage"},{"id":"451","location":{"end":{"column":49,"line":365},"start":{"column":13,"line":365}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' - regex_escape(this.separator)","status":"NoCoverage"},{"id":"452","location":{"end":{"column":18,"line":365},"start":{"column":13,"line":365}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"453","location":{"end":{"column":96,"line":365},"start":{"column":92,"line":365}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"447","location":{"end":{"column":9,"line":364},"start":{"column":6,"line":364}},"mutatorName":"EqualityOperator","replacement":"i <= 0","status":"Killed"},{"id":"454","location":{"end":{"column":4,"line":368},"start":{"column":8,"line":366}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"455","location":{"end":{"column":36,"line":371},"start":{"column":20,"line":371}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' + fsm_0 - ')?'","status":"Killed"},{"id":"456","location":{"end":{"column":31,"line":371},"start":{"column":20,"line":371}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' - fsm_0","status":"Killed"},{"id":"458","location":{"end":{"column":36,"line":371},"start":{"column":32,"line":371}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"457","location":{"end":{"column":25,"line":371},"start":{"column":20,"line":371}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"460","location":{"end":{"column":2,"line":392},"start":{"column":78,"line":375}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"461","location":{"end":{"column":32,"line":376},"start":{"column":5,"line":376}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"433","location":{"end":{"column":16,"line":360},"start":{"column":5,"line":360}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"463","location":{"end":{"column":32,"line":376},"start":{"column":5,"line":376}},"mutatorName":"EqualityOperator","replacement":"typeof varname === 'string'","status":"Killed"},{"id":"464","location":{"end":{"column":32,"line":376},"start":{"column":24,"line":376}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"465","location":{"end":{"column":85,"line":376},"start":{"column":50,"line":376}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"466","location":{"end":{"column":37,"line":377},"start":{"column":5,"line":377}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"442","location":{"end":{"column":27,"line":364},"start":{"column":6,"line":364}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"468","location":{"end":{"column":37,"line":377},"start":{"column":5,"line":377}},"mutatorName":"EqualityOperator","replacement":"typeof operatorChar === 'string'","status":"Killed"},{"id":"445","location":{"end":{"column":9,"line":364},"start":{"column":6,"line":364}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"470","location":{"end":{"column":95,"line":377},"start":{"column":55,"line":377}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"469","location":{"end":{"column":37,"line":377},"start":{"column":29,"line":377}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"471","location":{"end":{"column":29,"line":379},"start":{"column":5,"line":379}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"473","location":{"end":{"column":29,"line":379},"start":{"column":5,"line":379}},"mutatorName":"BooleanLiteral","replacement":"operators[operatorChar]","status":"Killed"},{"id":"474","location":{"end":{"column":91,"line":379},"start":{"column":47,"line":379}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"475","location":{"end":{"column":33,"line":380},"start":{"column":5,"line":380}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"448","location":{"end":{"column":4,"line":366},"start":{"column":28,"line":364}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"477","location":{"end":{"column":33,"line":380},"start":{"column":5,"line":380}},"mutatorName":"EqualityOperator","replacement":"typeof explode === 'boolean'","status":"Killed"},{"id":"478","location":{"end":{"column":33,"line":380},"start":{"column":24,"line":380}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"479","location":{"end":{"column":87,"line":380},"start":{"column":51,"line":380}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"459","location":{"end":{"column":41,"line":371},"start":{"column":38,"line":371}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"480","location":{"end":{"column":54,"line":381},"start":{"column":5,"line":381}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"482","location":{"end":{"column":54,"line":381},"start":{"column":5,"line":381}},"mutatorName":"LogicalOperator","replacement":"maxLength !== null || typeof maxLength !== 'number'","status":"Killed"},{"id":"462","location":{"end":{"column":32,"line":376},"start":{"column":5,"line":376}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"483","location":{"end":{"column":21,"line":381},"start":{"column":5,"line":381}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"485","location":{"end":{"column":21,"line":381},"start":{"column":5,"line":381}},"mutatorName":"EqualityOperator","replacement":"maxLength === null","status":"Killed"},{"id":"486","location":{"end":{"column":54,"line":381},"start":{"column":25,"line":381}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"467","location":{"end":{"column":37,"line":377},"start":{"column":5,"line":377}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"488","location":{"end":{"column":54,"line":381},"start":{"column":25,"line":381}},"mutatorName":"EqualityOperator","replacement":"typeof maxLength === 'number'","status":"Killed"},{"id":"472","location":{"end":{"column":29,"line":379},"start":{"column":5,"line":379}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"490","location":{"end":{"column":109,"line":381},"start":{"column":72,"line":381}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"476","location":{"end":{"column":33,"line":380},"start":{"column":5,"line":380}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"491","location":{"end":{"column":2,"line":417},"start":{"column":65,"line":393}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"492","location":{"end":{"column":33,"line":394},"start":{"column":5,"line":394}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"494","location":{"end":{"column":33,"line":394},"start":{"column":5,"line":394}},"mutatorName":"BooleanLiteral","replacement":"varspec.match(rule_varspec)","status":"Killed"},{"id":"489","location":{"end":{"column":54,"line":381},"start":{"column":46,"line":381}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"481","location":{"end":{"column":54,"line":381},"start":{"column":5,"line":381}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"484","location":{"end":{"column":21,"line":381},"start":{"column":5,"line":381}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"422","location":{"end":{"column":33,"line":348},"start":{"column":12,"line":348}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout"},{"id":"498","location":{"end":{"column":40,"line":399},"start":{"column":18,"line":399}},"mutatorName":"BooleanLiteral","replacement":"!varspec.match(/\\*$/)","status":"Killed"},{"id":"499","location":{"end":{"column":40,"line":399},"start":{"column":19,"line":399}},"mutatorName":"BooleanLiteral","replacement":"varspec.match(/\\*$/)","status":"Killed"},{"id":"425","location":{"end":{"column":15,"line":348},"start":{"column":12,"line":348}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout"},{"id":"501","location":{"end":{"column":26,"line":401},"start":{"column":5,"line":401}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"493","location":{"end":{"column":33,"line":394},"start":{"column":5,"line":394}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"500","location":{"end":{"column":74,"line":400},"start":{"column":58,"line":400}},"mutatorName":"ArithmeticOperator","replacement":"varspec.length + 1","status":"Killed"},{"id":"495","location":{"end":{"column":3,"line":396},"start":{"column":34,"line":394}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"506","location":{"end":{"column":107,"line":402},"start":{"column":19,"line":402}},"mutatorName":"ArithmeticOperator","replacement":"'Variable operator ' + JSON.stringify(operatorChar) - ' does not work with explode modifier'","status":"NoCoverage"},{"id":"507","location":{"end":{"column":68,"line":402},"start":{"column":19,"line":402}},"mutatorName":"ArithmeticOperator","replacement":"'Variable operator ' - JSON.stringify(operatorChar)","status":"NoCoverage"},{"id":"508","location":{"end":{"column":39,"line":402},"start":{"column":19,"line":402}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"509","location":{"end":{"column":107,"line":402},"start":{"column":69,"line":402}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"503","location":{"end":{"column":26,"line":401},"start":{"column":5,"line":401}},"mutatorName":"LogicalOperator","replacement":"explode || !separator","status":"Killed"},{"id":"504","location":{"end":{"column":26,"line":401},"start":{"column":16,"line":401}},"mutatorName":"BooleanLiteral","replacement":"separator","status":"Killed"},{"id":"510","location":{"end":{"column":57,"line":405},"start":{"column":54,"line":405}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"512","location":{"end":{"column":38,"line":406},"start":{"column":18,"line":406}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"514","location":{"end":{"column":38,"line":406},"start":{"column":18,"line":406}},"mutatorName":"EqualityOperator","replacement":"varnameMaxLength_i >= 0","status":"Killed"},{"id":"487","location":{"end":{"column":54,"line":381},"start":{"column":25,"line":381}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"516","location":{"end":{"column":43,"line":407},"start":{"column":23,"line":407}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"511","location":{"end":{"column":38,"line":406},"start":{"column":18,"line":406}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"518","location":{"end":{"column":43,"line":407},"start":{"column":23,"line":407}},"mutatorName":"EqualityOperator","replacement":"varnameMaxLength_i >= 0","status":"Killed"},{"id":"515","location":{"end":{"column":43,"line":407},"start":{"column":23,"line":407}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"520","location":{"end":{"column":108,"line":409},"start":{"column":26,"line":409}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"521","location":{"end":{"column":108,"line":409},"start":{"column":26,"line":409}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"522","location":{"end":{"column":108,"line":409},"start":{"column":26,"line":409}},"mutatorName":"LogicalOperator","replacement":"templateOptions && templateOptions.variables || templateOptions.variables[varname]","status":"Killed"},{"id":"523","location":{"end":{"column":70,"line":409},"start":{"column":26,"line":409}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"524","location":{"end":{"column":70,"line":409},"start":{"column":26,"line":409}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"525","location":{"end":{"column":70,"line":409},"start":{"column":26,"line":409}},"mutatorName":"LogicalOperator","replacement":"templateOptions || templateOptions.variables","status":"Killed"},{"id":"519","location":{"end":{"column":100,"line":407},"start":{"column":80,"line":407}},"mutatorName":"ArithmeticOperator","replacement":"varnameMaxLength_i - 1","status":"Killed"},{"id":"527","location":{"end":{"column":11,"line":419},"start":{"column":5,"line":419}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"526","location":{"end":{"column":2,"line":423},"start":{"column":47,"line":418}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"529","location":{"end":{"column":63,"line":422},"start":{"column":9,"line":420}},"mutatorName":"ArithmeticOperator","replacement":"this.varname + (this.explode ? '*' : '') - (typeof this.maxLength === 'number' ? ':' + this.maxLength : '')","status":"Killed"},{"id":"530","location":{"end":{"column":28,"line":421},"start":{"column":9,"line":420}},"mutatorName":"ArithmeticOperator","replacement":"this.varname - (this.explode ? '*' : '')","status":"Killed"},{"id":"496","location":{"end":{"column":64,"line":395},"start":{"column":19,"line":395}},"mutatorName":"ArithmeticOperator","replacement":"'Malformed variable ' - JSON.stringify(varspec)","status":"Survived"},{"id":"497","location":{"end":{"column":40,"line":395},"start":{"column":19,"line":395}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"532","location":{"end":{"column":27,"line":421},"start":{"column":25,"line":421}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"533","location":{"end":{"column":36,"line":422},"start":{"column":4,"line":422}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"535","location":{"end":{"column":36,"line":422},"start":{"column":4,"line":422}},"mutatorName":"EqualityOperator","replacement":"typeof this.maxLength !== 'number'","status":"Killed"},{"id":"505","location":{"end":{"column":3,"line":403},"start":{"column":27,"line":401}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"502","location":{"end":{"column":26,"line":401},"start":{"column":5,"line":401}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"513","location":{"end":{"column":38,"line":406},"start":{"column":18,"line":406}},"mutatorName":"EqualityOperator","replacement":"varnameMaxLength_i <= 0","status":"Survived"},{"id":"539","location":{"end":{"column":62,"line":422},"start":{"column":60,"line":422}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"540","location":{"end":{"column":2,"line":486},"start":{"column":45,"line":424}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"517","location":{"end":{"column":43,"line":407},"start":{"column":23,"line":407}},"mutatorName":"EqualityOperator","replacement":"varnameMaxLength_i <= 0","status":"Survived"},{"id":"542","location":{"end":{"column":59,"line":429},"start":{"column":5,"line":429}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"543","location":{"end":{"column":59,"line":429},"start":{"column":5,"line":429}},"mutatorName":"LogicalOperator","replacement":"typeof varvalue == 'string' && typeof varvalue == 'number'","status":"Killed"},{"id":"541","location":{"end":{"column":59,"line":429},"start":{"column":5,"line":429}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"545","location":{"end":{"column":30,"line":429},"start":{"column":5,"line":429}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"546","location":{"end":{"column":30,"line":429},"start":{"column":5,"line":429}},"mutatorName":"EqualityOperator","replacement":"typeof varvalue != 'string'","status":"Killed"},{"id":"547","location":{"end":{"column":30,"line":429},"start":{"column":22,"line":429}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"544","location":{"end":{"column":30,"line":429},"start":{"column":5,"line":429}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"528","location":{"end":{"column":11,"line":419},"start":{"column":5,"line":419}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"536","location":{"end":{"column":36,"line":422},"start":{"column":28,"line":422}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"534","location":{"end":{"column":36,"line":422},"start":{"column":4,"line":422}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"531","location":{"end":{"column":22,"line":421},"start":{"column":19,"line":421}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"552","location":{"end":{"column":3,"line":438},"start":{"column":60,"line":429}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"553","location":{"end":{"column":17,"line":431},"start":{"column":6,"line":431}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"555","location":{"end":{"column":14,"line":432},"start":{"column":6,"line":432}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"548","location":{"end":{"column":59,"line":429},"start":{"column":34,"line":429}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"550","location":{"end":{"column":59,"line":429},"start":{"column":34,"line":429}},"mutatorName":"EqualityOperator","replacement":"typeof varvalue != 'number'","status":"Killed"},{"id":"558","location":{"end":{"column":23,"line":433},"start":{"column":7,"line":433}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"559","location":{"end":{"column":23,"line":433},"start":{"column":7,"line":433}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"560","location":{"end":{"column":23,"line":433},"start":{"column":7,"line":433}},"mutatorName":"LogicalOperator","replacement":"op.form && value","status":"Killed"},{"id":"561","location":{"end":{"column":63,"line":433},"start":{"column":32,"line":433}},"mutatorName":"ArithmeticOperator","replacement":"t.varname + '=' - encode(value)","status":"Killed"},{"id":"562","location":{"end":{"column":47,"line":433},"start":{"column":32,"line":433}},"mutatorName":"ArithmeticOperator","replacement":"t.varname - '='","status":"Killed"},{"id":"554","location":{"end":{"column":17,"line":431},"start":{"column":6,"line":431}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"563","location":{"end":{"column":47,"line":433},"start":{"column":44,"line":433}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"556","location":{"end":{"column":14,"line":432},"start":{"column":6,"line":432}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"564","location":{"end":{"column":4,"line":437},"start":{"column":8,"line":435}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"565","location":{"end":{"column":55,"line":438},"start":{"column":11,"line":438}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"566","location":{"end":{"column":55,"line":438},"start":{"column":11,"line":438}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"557","location":{"end":{"column":4,"line":435},"start":{"column":15,"line":432}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"569","location":{"end":{"column":55,"line":438},"start":{"column":38,"line":438}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"537","location":{"end":{"column":57,"line":422},"start":{"column":39,"line":422}},"mutatorName":"ArithmeticOperator","replacement":"':' - this.maxLength","status":"Survived"},{"id":"538","location":{"end":{"column":42,"line":422},"start":{"column":39,"line":422}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"573","location":{"end":{"column":15,"line":439},"start":{"column":6,"line":439}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"571","location":{"end":{"column":55,"line":438},"start":{"column":38,"line":438}},"mutatorName":"EqualityOperator","replacement":"varvalue.length <= 0","status":"Killed"},{"id":"575","location":{"end":{"column":4,"line":450},"start":{"column":16,"line":439}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"574","location":{"end":{"column":15,"line":439},"start":{"column":6,"line":439}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"572","location":{"end":{"column":3,"line":460},"start":{"column":56,"line":438}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"577","location":{"end":{"column":19,"line":441},"start":{"column":8,"line":441}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"576","location":{"end":{"column":5,"line":448},"start":{"column":46,"line":440}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"579","location":{"end":{"column":16,"line":442},"start":{"column":8,"line":442}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"580","location":{"end":{"column":16,"line":442},"start":{"column":8,"line":442}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"549","location":{"end":{"column":59,"line":429},"start":{"column":34,"line":429}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"551","location":{"end":{"column":59,"line":429},"start":{"column":51,"line":429}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"581","location":{"end":{"column":6,"line":445},"start":{"column":17,"line":442}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"583","location":{"end":{"column":25,"line":443},"start":{"column":9,"line":443}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"585","location":{"end":{"column":65,"line":443},"start":{"column":34,"line":443}},"mutatorName":"ArithmeticOperator","replacement":"t.varname + '=' - encode(value)","status":"Killed"},{"id":"584","location":{"end":{"column":25,"line":443},"start":{"column":9,"line":443}},"mutatorName":"LogicalOperator","replacement":"op.form && value","status":"Killed"},{"id":"586","location":{"end":{"column":49,"line":443},"start":{"column":34,"line":443}},"mutatorName":"ArithmeticOperator","replacement":"t.varname - '='","status":"Killed"},{"id":"589","location":{"end":{"column":4,"line":459},"start":{"column":8,"line":450}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"590","location":{"end":{"column":18,"line":452},"start":{"column":7,"line":452}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"588","location":{"end":{"column":6,"line":447},"start":{"column":10,"line":445}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"587","location":{"end":{"column":49,"line":443},"start":{"column":46,"line":443}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"592","location":{"end":{"column":23,"line":453},"start":{"column":7,"line":453}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"594","location":{"end":{"column":23,"line":453},"start":{"column":7,"line":453}},"mutatorName":"EqualityOperator","replacement":"value.length !== 0","status":"Killed"},{"id":"595","location":{"end":{"column":15,"line":454},"start":{"column":7,"line":454}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"596","location":{"end":{"column":15,"line":454},"start":{"column":7,"line":454}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"567","location":{"end":{"column":55,"line":438},"start":{"column":11,"line":438}},"mutatorName":"LogicalOperator","replacement":"Array.isArray(varvalue) || varvalue.length > 0","status":"Killed"},{"id":"598","location":{"end":{"column":83,"line":455},"start":{"column":12,"line":455}},"mutatorName":"ArithmeticOperator","replacement":"t.varname + '=' - value.map(function (v) {\n  return encode(v);\n}).join(',')","status":"Killed"},{"id":"597","location":{"end":{"column":5,"line":456},"start":{"column":16,"line":454}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"599","location":{"end":{"column":27,"line":455},"start":{"column":12,"line":455}},"mutatorName":"ArithmeticOperator","replacement":"t.varname - '='","status":"Killed"},{"id":"600","location":{"end":{"column":27,"line":455},"start":{"column":24,"line":455}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"602","location":{"end":{"column":82,"line":455},"start":{"column":79,"line":455}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"601","location":{"end":{"column":72,"line":455},"start":{"column":51,"line":455}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"604","location":{"end":{"column":54,"line":457},"start":{"column":33,"line":457}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"605","location":{"end":{"column":64,"line":457},"start":{"column":61,"line":457}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"603","location":{"end":{"column":5,"line":458},"start":{"column":9,"line":456}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"607","location":{"end":{"column":50,"line":460},"start":{"column":11,"line":460}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"606","location":{"end":{"column":50,"line":460},"start":{"column":11,"line":460}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"568","location":{"end":{"column":55,"line":438},"start":{"column":38,"line":438}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"610","location":{"end":{"column":38,"line":460},"start":{"column":11,"line":460}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"570","location":{"end":{"column":55,"line":438},"start":{"column":38,"line":438}},"mutatorName":"EqualityOperator","replacement":"varvalue.length >= 0","status":"Survived"},{"id":"611","location":{"end":{"column":38,"line":460},"start":{"column":11,"line":460}},"mutatorName":"EqualityOperator","replacement":"typeof varvalue != 'object'","status":"Killed"},{"id":"613","location":{"end":{"column":3,"line":484},"start":{"column":51,"line":460}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"612","location":{"end":{"column":38,"line":460},"start":{"column":30,"line":460}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"615","location":{"end":{"column":17,"line":461},"start":{"column":6,"line":461}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"616","location":{"end":{"column":4,"line":463},"start":{"column":18,"line":461}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"578","location":{"end":{"column":19,"line":441},"start":{"column":8,"line":441}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"614","location":{"end":{"column":17,"line":461},"start":{"column":6,"line":461}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"618","location":{"end":{"column":15,"line":464},"start":{"column":6,"line":464}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"620","location":{"end":{"column":4,"line":471},"start":{"column":16,"line":464}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"621","location":{"end":{"column":5,"line":469},"start":{"column":57,"line":466}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"619","location":{"end":{"column":15,"line":464},"start":{"column":6,"line":464}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"623","location":{"end":{"column":32,"line":467},"start":{"column":8,"line":467}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"624","location":{"end":{"column":32,"line":467},"start":{"column":8,"line":467}},"mutatorName":"LogicalOperator","replacement":"op.form && varvalue[key]","status":"Killed"},{"id":"582","location":{"end":{"column":25,"line":443},"start":{"column":9,"line":443}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"626","location":{"end":{"column":58,"line":467},"start":{"column":41,"line":467}},"mutatorName":"ArithmeticOperator","replacement":"encode(key) - '='","status":"Killed"},{"id":"625","location":{"end":{"column":82,"line":467},"start":{"column":41,"line":467}},"mutatorName":"ArithmeticOperator","replacement":"encode(key) + '=' - encode(varvalue[key])","status":"Killed"},{"id":"628","location":{"end":{"column":4,"line":483},"start":{"column":8,"line":471}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"629","location":{"end":{"column":15,"line":472},"start":{"column":7,"line":472}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"627","location":{"end":{"column":58,"line":467},"start":{"column":55,"line":467}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"631","location":{"end":{"column":5,"line":477},"start":{"column":16,"line":472}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"630","location":{"end":{"column":15,"line":472},"start":{"column":7,"line":472}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"632","location":{"end":{"column":6,"line":475},"start":{"column":58,"line":473}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"634","location":{"end":{"column":30,"line":474},"start":{"column":13,"line":474}},"mutatorName":"ArithmeticOperator","replacement":"encode(key) - ','","status":"Killed"},{"id":"635","location":{"end":{"column":30,"line":474},"start":{"column":27,"line":474}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"633","location":{"end":{"column":54,"line":474},"start":{"column":13,"line":474}},"mutatorName":"ArithmeticOperator","replacement":"encode(key) + ',' - encode(varvalue[key])","status":"Killed"},{"id":"637","location":{"end":{"column":42,"line":476},"start":{"column":27,"line":476}},"mutatorName":"ArithmeticOperator","replacement":"t.varname - '='","status":"Killed"},{"id":"638","location":{"end":{"column":42,"line":476},"start":{"column":39,"line":476}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"636","location":{"end":{"column":60,"line":476},"start":{"column":27,"line":476}},"mutatorName":"ArithmeticOperator","replacement":"t.varname + '=' - items.join(',')","status":"Killed"},{"id":"640","location":{"end":{"column":5,"line":482},"start":{"column":9,"line":477}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"593","location":{"end":{"column":23,"line":453},"start":{"column":7,"line":453}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"639","location":{"end":{"column":59,"line":476},"start":{"column":56,"line":476}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"643","location":{"end":{"column":30,"line":479},"start":{"column":13,"line":479}},"mutatorName":"ArithmeticOperator","replacement":"encode(key) - ','","status":"Killed"},{"id":"644","location":{"end":{"column":30,"line":479},"start":{"column":27,"line":479}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"641","location":{"end":{"column":6,"line":480},"start":{"column":58,"line":478}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"642","location":{"end":{"column":54,"line":479},"start":{"column":13,"line":479}},"mutatorName":"ArithmeticOperator","replacement":"encode(key) + ',' - encode(varvalue[key])","status":"Killed"},{"id":"646","location":{"end":{"column":2,"line":501},"start":{"column":63,"line":487}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"591","location":{"end":{"column":18,"line":452},"start":{"column":7,"line":452}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"645","location":{"end":{"column":41,"line":481},"start":{"column":38,"line":481}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"650","location":{"end":{"column":14,"line":491},"start":{"column":6,"line":491}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"649","location":{"end":{"column":3,"line":496},"start":{"column":18,"line":490}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"647","location":{"end":{"column":17,"line":490},"start":{"column":5,"line":490}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"653","location":{"end":{"column":217,"line":492},"start":{"column":27,"line":492}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"648","location":{"end":{"column":17,"line":490},"start":{"column":5,"line":490}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"654","location":{"end":{"column":103,"line":492},"start":{"column":35,"line":492}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"655","location":{"end":{"column":100,"line":492},"start":{"column":78,"line":492}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"608","location":{"end":{"column":50,"line":460},"start":{"column":11,"line":460}},"mutatorName":"LogicalOperator","replacement":"typeof varvalue == 'object' || varvalue","status":"Survived"},{"id":"657","location":{"end":{"column":214,"line":492},"start":{"column":118,"line":492}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"658","location":{"end":{"column":211,"line":492},"start":{"column":189,"line":492}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"660","location":{"end":{"column":4,"line":495},"start":{"column":8,"line":493}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"661","location":{"end":{"column":81,"line":494},"start":{"column":27,"line":494}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"662","location":{"end":{"column":78,"line":494},"start":{"column":45,"line":494}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"663","location":{"end":{"column":19,"line":496},"start":{"column":11,"line":496}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"652","location":{"end":{"column":4,"line":493},"start":{"column":15,"line":491}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"609","location":{"end":{"column":38,"line":460},"start":{"column":11,"line":460}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"666","location":{"end":{"column":94,"line":497},"start":{"column":26,"line":497}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"667","location":{"end":{"column":91,"line":497},"start":{"column":69,"line":497}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"617","location":{"end":{"column":45,"line":462},"start":{"column":20,"line":462}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"665","location":{"end":{"column":3,"line":498},"start":{"column":20,"line":496}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"669","location":{"end":{"column":3,"line":500},"start":{"column":7,"line":498}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"670","location":{"end":{"column":2,"line":516},"start":{"column":48,"line":502}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"622","location":{"end":{"column":32,"line":467},"start":{"column":8,"line":467}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"672","location":{"end":{"column":17,"line":504},"start":{"column":5,"line":504}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"671","location":{"end":{"column":17,"line":504},"start":{"column":5,"line":504}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"674","location":{"end":{"column":14,"line":505},"start":{"column":6,"line":505}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"664","location":{"end":{"column":19,"line":496},"start":{"column":11,"line":496}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"673","location":{"end":{"column":3,"line":511},"start":{"column":18,"line":504}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"678","location":{"end":{"column":174,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) + '(?:=(' + range_regex(this.range) + '*)))(?:' + this.separator + '(?:' + regex_escape(this.varname) + '(=' - range_regex(this.range)","status":"Killed"},{"id":"677","location":{"end":{"column":184,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) + '(?:=(' + range_regex(this.range) + '*)))(?:' + this.separator + '(?:' + regex_escape(this.varname) + '(=' + range_regex(this.range) - '*)))*)?'","status":"Killed"},{"id":"680","location":{"end":{"column":145,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) + '(?:=(' + range_regex(this.range) + '*)))(?:' + this.separator + '(?:' - regex_escape(this.varname)","status":"Killed"},{"id":"679","location":{"end":{"column":150,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) + '(?:=(' + range_regex(this.range) + '*)))(?:' + this.separator + '(?:' + regex_escape(this.varname) - '(='","status":"Killed"},{"id":"681","location":{"end":{"column":118,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) + '(?:=(' + range_regex(this.range) + '*)))(?:' + this.separator - '(?:'","status":"Killed"},{"id":"682","location":{"end":{"column":112,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) + '(?:=(' + range_regex(this.range) + '*)))(?:' - this.separator","status":"Killed"},{"id":"683","location":{"end":{"column":97,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) + '(?:=(' + range_regex(this.range) - '*)))(?:'","status":"Killed"},{"id":"684","location":{"end":{"column":87,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) + '(?:=(' - range_regex(this.range)","status":"Killed"},{"id":"685","location":{"end":{"column":63,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' + regex_escape(this.varname) - '(?:=('","status":"Killed"},{"id":"686","location":{"end":{"column":55,"line":506},"start":{"column":22,"line":506}},"mutatorName":"ArithmeticOperator","replacement":"'((?:' - regex_escape(this.varname)","status":"Killed"},{"id":"687","location":{"end":{"column":28,"line":506},"start":{"column":22,"line":506}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"688","location":{"end":{"column":63,"line":506},"start":{"column":56,"line":506}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"651","location":{"end":{"column":14,"line":491},"start":{"column":6,"line":491}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"689","location":{"end":{"column":97,"line":506},"start":{"column":88,"line":506}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"690","location":{"end":{"column":118,"line":506},"start":{"column":113,"line":506}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"693","location":{"end":{"column":189,"line":506},"start":{"column":186,"line":506}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"692","location":{"end":{"column":184,"line":506},"start":{"column":175,"line":506}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"691","location":{"end":{"column":150,"line":506},"start":{"column":146,"line":506}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"695","location":{"end":{"column":69,"line":509},"start":{"column":22,"line":509}},"mutatorName":"ArithmeticOperator","replacement":"'(' + range_regex(this.range + this.separator) - '*)'","status":"Killed"},{"id":"696","location":{"end":{"column":64,"line":509},"start":{"column":22,"line":509}},"mutatorName":"ArithmeticOperator","replacement":"'(' - range_regex(this.range + this.separator)","status":"Killed"},{"id":"694","location":{"end":{"column":4,"line":510},"start":{"column":8,"line":507}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"698","location":{"end":{"column":63,"line":509},"start":{"column":38,"line":509}},"mutatorName":"ArithmeticOperator","replacement":"this.range - this.separator","status":"Killed"},{"id":"697","location":{"end":{"column":25,"line":509},"start":{"column":22,"line":509}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"699","location":{"end":{"column":69,"line":509},"start":{"column":65,"line":509}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"701","location":{"end":{"column":19,"line":511},"start":{"column":11,"line":511}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"668","location":{"end":{"column":84,"line":497},"start":{"column":81,"line":497}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"704","location":{"end":{"column":94,"line":512},"start":{"column":21,"line":512}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' + regex_escape(this.varname) + '(?:=(' + range_regex(this.range) - '*))?)?'","status":"Killed"},{"id":"705","location":{"end":{"column":85,"line":512},"start":{"column":21,"line":512}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' + regex_escape(this.varname) + '(?:=(' - range_regex(this.range)","status":"Killed"},{"id":"706","location":{"end":{"column":61,"line":512},"start":{"column":21,"line":512}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' + regex_escape(this.varname) - '(?:=('","status":"Killed"},{"id":"707","location":{"end":{"column":53,"line":512},"start":{"column":21,"line":512}},"mutatorName":"ArithmeticOperator","replacement":"'(?:' - regex_escape(this.varname)","status":"Killed"},{"id":"708","location":{"end":{"column":26,"line":512},"start":{"column":21,"line":512}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"709","location":{"end":{"column":61,"line":512},"start":{"column":54,"line":512}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"710","location":{"end":{"column":94,"line":512},"start":{"column":86,"line":512}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"656","location":{"end":{"column":93,"line":492},"start":{"column":90,"line":492}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"711","location":{"end":{"column":99,"line":512},"start":{"column":96,"line":512}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"712","location":{"end":{"column":3,"line":515},"start":{"column":7,"line":513}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"713","location":{"end":{"column":53,"line":514},"start":{"column":21,"line":514}},"mutatorName":"ArithmeticOperator","replacement":"'(' + range_regex(this.range) - '*)'","status":"Killed"},{"id":"659","location":{"end":{"column":204,"line":492},"start":{"column":201,"line":492}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"714","location":{"end":{"column":48,"line":514},"start":{"column":21,"line":514}},"mutatorName":"ArithmeticOperator","replacement":"'(' - range_regex(this.range)","status":"Killed"},{"id":"715","location":{"end":{"column":24,"line":514},"start":{"column":21,"line":514}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"716","location":{"end":{"column":53,"line":514},"start":{"column":49,"line":514}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"718","location":{"end":{"column":2,"line":532},"start":{"column":61,"line":519}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"719","location":{"end":{"column":17,"line":521},"start":{"column":5,"line":521}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"721","location":{"end":{"column":17,"line":521},"start":{"column":5,"line":521}},"mutatorName":"BooleanLiteral","replacement":"final_match","status":"Killed"},{"id":"722","location":{"end":{"column":2,"line":540},"start":{"column":66,"line":534}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"723","location":{"end":{"column":36,"line":535},"start":{"column":5,"line":535}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"675","location":{"end":{"column":14,"line":505},"start":{"column":6,"line":505}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"676","location":{"end":{"column":4,"line":507},"start":{"column":15,"line":505}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"725","location":{"end":{"column":36,"line":535},"start":{"column":5,"line":535}},"mutatorName":"BooleanLiteral","replacement":"uriTemplate instanceof Route","status":"Killed"},{"id":"727","location":{"end":{"column":66,"line":536},"start":{"column":19,"line":536}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"700","location":{"end":{"column":74,"line":509},"start":{"column":71,"line":509}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"729","location":{"end":{"column":77,"line":539},"start":{"column":51,"line":539}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"703","location":{"end":{"column":3,"line":513},"start":{"column":20,"line":511}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"730","location":{"end":{"column":75,"line":539},"start":{"column":53,"line":539}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"702","location":{"end":{"column":19,"line":511},"start":{"column":11,"line":511}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"731","location":{"end":{"column":2,"line":549},"start":{"column":40,"line":542}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"732","location":{"end":{"column":29,"line":547},"start":{"column":5,"line":547}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"734","location":{"end":{"column":29,"line":547},"start":{"column":5,"line":547}},"mutatorName":"BooleanLiteral","replacement":"remaining_states.length","status":"Killed"},{"id":"733","location":{"end":{"column":29,"line":547},"start":{"column":5,"line":547}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"735","location":{"end":{"column":51,"line":551},"start":{"column":41,"line":551}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"737","location":{"end":{"column":57,"line":552},"start":{"column":29,"line":552}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"736","location":{"end":{"column":2,"line":554},"start":{"column":53,"line":551}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"717","location":{"end":{"column":58,"line":514},"start":{"column":55,"line":514}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"720","location":{"end":{"column":17,"line":521},"start":{"column":5,"line":521}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"742","location":{"end":{"column":2,"line":639},"start":{"column":86,"line":560}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"743","location":{"end":{"column":82,"line":561},"start":{"column":5,"line":561}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"724","location":{"end":{"column":36,"line":535},"start":{"column":5,"line":535}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"745","location":{"end":{"column":82,"line":561},"start":{"column":5,"line":561}},"mutatorName":"LogicalOperator","replacement":"typeof uriTemplate == 'object' && options === undefined || matchValue === undefined","status":"Killed"},{"id":"746","location":{"end":{"column":56,"line":561},"start":{"column":5,"line":561}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"728","location":{"end":{"column":49,"line":539},"start":{"column":47,"line":539}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"726","location":{"end":{"column":3,"line":537},"start":{"column":37,"line":535}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"748","location":{"end":{"column":56,"line":561},"start":{"column":5,"line":561}},"mutatorName":"LogicalOperator","replacement":"typeof uriTemplate == 'object' || options === undefined","status":"Killed"},{"id":"749","location":{"end":{"column":33,"line":561},"start":{"column":5,"line":561}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"751","location":{"end":{"column":33,"line":561},"start":{"column":5,"line":561}},"mutatorName":"EqualityOperator","replacement":"typeof uriTemplate != 'object'","status":"Killed"},{"id":"739","location":{"end":{"column":47,"line":556},"start":{"column":41,"line":556}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"738","location":{"end":{"column":55,"line":553},"start":{"column":30,"line":553}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"740","location":{"end":{"column":2,"line":558},"start":{"column":49,"line":556}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"744","location":{"end":{"column":82,"line":561},"start":{"column":5,"line":561}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"741","location":{"end":{"column":56,"line":557},"start":{"column":29,"line":557}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"747","location":{"end":{"column":56,"line":561},"start":{"column":5,"line":561}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"752","location":{"end":{"column":33,"line":561},"start":{"column":25,"line":561}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"750","location":{"end":{"column":33,"line":561},"start":{"column":5,"line":561}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"759","location":{"end":{"column":3,"line":566},"start":{"column":83,"line":561}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"760","location":{"end":{"column":3,"line":568},"start":{"column":7,"line":566}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"761","location":{"end":{"column":3,"line":580},"start":{"column":38,"line":572}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"763","location":{"end":{"column":31,"line":573},"start":{"column":6,"line":573}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"762","location":{"end":{"column":31,"line":573},"start":{"column":6,"line":573}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"765","location":{"end":{"column":31,"line":573},"start":{"column":23,"line":573}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"764","location":{"end":{"column":31,"line":573},"start":{"column":6,"line":573}},"mutatorName":"EqualityOperator","replacement":"typeof token !== 'string'","status":"Killed"},{"id":"767","location":{"end":{"column":36,"line":575},"start":{"column":7,"line":575}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"766","location":{"end":{"column":4,"line":579},"start":{"column":47,"line":574}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"768","location":{"end":{"column":36,"line":575},"start":{"column":7,"line":575}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"753","location":{"end":{"column":56,"line":561},"start":{"column":37,"line":561}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"769","location":{"end":{"column":5,"line":577},"start":{"column":37,"line":575}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"772","location":{"end":{"column":3,"line":591},"start":{"column":29,"line":584}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"754","location":{"end":{"column":56,"line":561},"start":{"column":37,"line":561}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"755","location":{"end":{"column":56,"line":561},"start":{"column":37,"line":561}},"mutatorName":"EqualityOperator","replacement":"options !== undefined","status":"Survived"},{"id":"756","location":{"end":{"column":82,"line":561},"start":{"column":60,"line":561}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"757","location":{"end":{"column":82,"line":561},"start":{"column":60,"line":561}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"777","location":{"end":{"column":17,"line":588},"start":{"column":6,"line":588}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"778","location":{"end":{"column":4,"line":590},"start":{"column":18,"line":588}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"776","location":{"end":{"column":17,"line":588},"start":{"column":6,"line":588}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"758","location":{"end":{"column":82,"line":561},"start":{"column":60,"line":561}},"mutatorName":"EqualityOperator","replacement":"matchValue !== undefined","status":"Survived"},{"id":"779","location":{"end":{"column":41,"line":589},"start":{"column":18,"line":589}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"781","location":{"end":{"column":40,"line":595},"start":{"column":5,"line":595}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"782","location":{"end":{"column":40,"line":595},"start":{"column":5,"line":595}},"mutatorName":"BooleanLiteral","replacement":"this.valueRouteMap.has(matchValue)","status":"Killed"},{"id":"783","location":{"end":{"column":3,"line":597},"start":{"column":41,"line":595}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"784","location":{"end":{"column":51,"line":602},"start":{"column":44,"line":602}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"786","location":{"end":{"column":72,"line":603},"start":{"column":41,"line":603}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"787","location":{"end":{"column":71,"line":603},"start":{"column":54,"line":603}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"788","location":{"end":{"column":33,"line":606},"start":{"column":16,"line":606}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"789","location":{"end":{"column":33,"line":606},"start":{"column":16,"line":606}},"mutatorName":"EqualityOperator","replacement":"i <= compares.length","status":"Killed"},{"id":"790","location":{"end":{"column":33,"line":606},"start":{"column":16,"line":606}},"mutatorName":"EqualityOperator","replacement":"i >= compares.length","status":"Killed"},{"id":"791","location":{"end":{"column":38,"line":606},"start":{"column":35,"line":606}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"792","location":{"end":{"column":4,"line":611},"start":{"column":39,"line":606}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"793","location":{"end":{"column":54,"line":607},"start":{"column":7,"line":607}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"794","location":{"end":{"column":54,"line":607},"start":{"column":7,"line":607}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"771","location":{"end":{"column":47,"line":576},"start":{"column":21,"line":576}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"770","location":{"end":{"column":63,"line":576},"start":{"column":21,"line":576}},"mutatorName":"ArithmeticOperator","replacement":"'Duplicate variable name ' - varspec.varname","status":"Survived"},{"id":"795","location":{"end":{"column":54,"line":607},"start":{"column":7,"line":607}},"mutatorName":"LogicalOperator","replacement":"compares[i][0] === false || compares[i][1] === true","status":"Killed"},{"id":"796","location":{"end":{"column":29,"line":607},"start":{"column":7,"line":607}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"773","location":{"end":{"column":34,"line":585},"start":{"column":6,"line":585}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"797","location":{"end":{"column":29,"line":607},"start":{"column":7,"line":607}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"775","location":{"end":{"column":34,"line":585},"start":{"column":6,"line":585}},"mutatorName":"BooleanLiteral","replacement":"state.partials[uriTemplate]","status":"Survived"},{"id":"798","location":{"end":{"column":29,"line":607},"start":{"column":7,"line":607}},"mutatorName":"EqualityOperator","replacement":"compares[i][0] !== false","status":"Killed"},{"id":"799","location":{"end":{"column":29,"line":607},"start":{"column":24,"line":607}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"774","location":{"end":{"column":34,"line":585},"start":{"column":6,"line":585}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"800","location":{"end":{"column":54,"line":607},"start":{"column":33,"line":607}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"801","location":{"end":{"column":54,"line":607},"start":{"column":33,"line":607}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"802","location":{"end":{"column":54,"line":607},"start":{"column":33,"line":607}},"mutatorName":"EqualityOperator","replacement":"compares[i][1] !== true","status":"Killed"},{"id":"803","location":{"end":{"column":54,"line":607},"start":{"column":50,"line":607}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"805","location":{"end":{"column":28,"line":614},"start":{"column":26,"line":614}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"806","location":{"end":{"column":49,"line":614},"start":{"column":47,"line":614}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"807","location":{"end":{"column":33,"line":615},"start":{"column":16,"line":615}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"808","location":{"end":{"column":33,"line":615},"start":{"column":16,"line":615}},"mutatorName":"EqualityOperator","replacement":"i <= compares.length","status":"Killed"},{"id":"804","location":{"end":{"column":5,"line":610},"start":{"column":55,"line":607}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"809","location":{"end":{"column":33,"line":615},"start":{"column":16,"line":615}},"mutatorName":"EqualityOperator","replacement":"i >= compares.length","status":"Killed"},{"id":"814","location":{"end":{"column":28,"line":616},"start":{"column":7,"line":616}},"mutatorName":"EqualityOperator","replacement":"compares[i][0] !== true","status":"Killed"},{"id":"810","location":{"end":{"column":38,"line":615},"start":{"column":35,"line":615}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"815","location":{"end":{"column":28,"line":616},"start":{"column":24,"line":616}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"813","location":{"end":{"column":28,"line":616},"start":{"column":7,"line":616}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"811","location":{"end":{"column":4,"line":630},"start":{"column":39,"line":615}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"817","location":{"end":{"column":29,"line":617},"start":{"column":8,"line":617}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"819","location":{"end":{"column":29,"line":617},"start":{"column":8,"line":617}},"mutatorName":"EqualityOperator","replacement":"compares[i][1] !== true","status":"Killed"},{"id":"820","location":{"end":{"column":29,"line":617},"start":{"column":25,"line":617}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"816","location":{"end":{"column":5,"line":624},"start":{"column":29,"line":616}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"812","location":{"end":{"column":28,"line":616},"start":{"column":7,"line":616}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"818","location":{"end":{"column":29,"line":617},"start":{"column":8,"line":617}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"821","location":{"end":{"column":6,"line":620},"start":{"column":30,"line":617}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"827","location":{"end":{"column":6,"line":623},"start":{"column":10,"line":620}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"828","location":{"end":{"column":34,"line":624},"start":{"column":13,"line":624}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"829","location":{"end":{"column":34,"line":624},"start":{"column":13,"line":624}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"830","location":{"end":{"column":34,"line":624},"start":{"column":13,"line":624}},"mutatorName":"EqualityOperator","replacement":"compares[i][2] !== true","status":"Killed"},{"id":"831","location":{"end":{"column":34,"line":624},"start":{"column":30,"line":624}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"832","location":{"end":{"column":5,"line":627},"start":{"column":35,"line":624}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"833","location":{"end":{"column":5,"line":629},"start":{"column":9,"line":627}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"780","location":{"end":{"column":40,"line":595},"start":{"column":5,"line":595}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"822","location":{"end":{"column":114,"line":619},"start":{"column":22,"line":619}},"mutatorName":"ArithmeticOperator","replacement":"'Inserted route ' + uriTemplate + ' is the same as other route ' - current.children[i].uriTemplate","status":"Survived"},{"id":"823","location":{"end":{"column":82,"line":619},"start":{"column":22,"line":619}},"mutatorName":"ArithmeticOperator","replacement":"'Inserted route ' + uriTemplate - ' is the same as other route '","status":"Survived"},{"id":"824","location":{"end":{"column":51,"line":619},"start":{"column":22,"line":619}},"mutatorName":"ArithmeticOperator","replacement":"'Inserted route ' - uriTemplate","status":"Survived"},{"id":"825","location":{"end":{"column":39,"line":619},"start":{"column":22,"line":619}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"839","location":{"end":{"column":75,"line":631},"start":{"column":23,"line":631}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"840","location":{"end":{"column":2,"line":652},"start":{"column":46,"line":641}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"826","location":{"end":{"column":82,"line":619},"start":{"column":52,"line":619}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"841","location":{"end":{"column":3,"line":648},"start":{"column":27,"line":645}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"843","location":{"end":{"column":20,"line":647},"start":{"column":6,"line":647}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"844","location":{"end":{"column":59,"line":647},"start":{"column":52,"line":647}},"mutatorName":"UpdateOperator","replacement":"order--","status":"Killed"},{"id":"845","location":{"end":{"column":48,"line":651},"start":{"column":38,"line":651}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"834","location":{"end":{"column":123,"line":628},"start":{"column":21,"line":628}},"mutatorName":"ArithmeticOperator","replacement":"'Inserted route ' + uriTemplate + ' partially overlaps with other routes ' - current.children[i].uriTemplate","status":"Survived"},{"id":"847","location":{"end":{"column":26,"line":663},"start":{"column":5,"line":663}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"848","location":{"end":{"column":26,"line":663},"start":{"column":5,"line":663}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"849","location":{"end":{"column":26,"line":663},"start":{"column":5,"line":663}},"mutatorName":"EqualityOperator","replacement":"typeof uri === 'string'","status":"NoCoverage"},{"id":"850","location":{"end":{"column":26,"line":663},"start":{"column":18,"line":663}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"851","location":{"end":{"column":88,"line":663},"start":{"column":44,"line":663}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"852","location":{"end":{"column":14,"line":667},"start":{"column":5,"line":667}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"853","location":{"end":{"column":14,"line":667},"start":{"column":5,"line":667}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"854","location":{"end":{"column":14,"line":667},"start":{"column":5,"line":667}},"mutatorName":"BooleanLiteral","replacement":"scheme_m","status":"NoCoverage"},{"id":"855","location":{"end":{"column":70,"line":667},"start":{"column":32,"line":667}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"856","location":{"end":{"column":2,"line":703},"start":{"column":65,"line":674}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"857","location":{"end":{"column":26,"line":675},"start":{"column":5,"line":675}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"835","location":{"end":{"column":91,"line":628},"start":{"column":21,"line":628}},"mutatorName":"ArithmeticOperator","replacement":"'Inserted route ' + uriTemplate - ' partially overlaps with other routes '","status":"Survived"},{"id":"859","location":{"end":{"column":26,"line":675},"start":{"column":5,"line":675}},"mutatorName":"EqualityOperator","replacement":"typeof uri === 'string'","status":"Killed"},{"id":"860","location":{"end":{"column":26,"line":675},"start":{"column":18,"line":675}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"861","location":{"end":{"column":88,"line":675},"start":{"column":44,"line":675}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"862","location":{"end":{"column":11,"line":679},"start":{"column":5,"line":679}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"863","location":{"end":{"column":11,"line":679},"start":{"column":5,"line":679}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"864","location":{"end":{"column":11,"line":679},"start":{"column":5,"line":679}},"mutatorName":"BooleanLiteral","replacement":"state","status":"Killed"},{"id":"836","location":{"end":{"column":50,"line":628},"start":{"column":21,"line":628}},"mutatorName":"ArithmeticOperator","replacement":"'Inserted route ' - uriTemplate","status":"Survived"},{"id":"838","location":{"end":{"column":91,"line":628},"start":{"column":51,"line":628}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"867","location":{"end":{"column":50,"line":683},"start":{"column":22,"line":683}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"837","location":{"end":{"column":38,"line":628},"start":{"column":21,"line":628}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"868","location":{"end":{"column":50,"line":683},"start":{"column":22,"line":683}},"mutatorName":"LogicalOperator","replacement":"state || offset < uri.length","status":"Killed"},{"id":"870","location":{"end":{"column":50,"line":683},"start":{"column":31,"line":683}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"869","location":{"end":{"column":50,"line":683},"start":{"column":31,"line":683}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"872","location":{"end":{"column":50,"line":683},"start":{"column":31,"line":683}},"mutatorName":"EqualityOperator","replacement":"offset >= uri.length","status":"Killed"},{"id":"871","location":{"end":{"column":50,"line":683},"start":{"column":31,"line":683}},"mutatorName":"EqualityOperator","replacement":"offset <= uri.length","status":"Killed"},{"id":"873","location":{"end":{"column":60,"line":683},"start":{"column":52,"line":683}},"mutatorName":"UpdateOperator","replacement":"offset--","status":"Killed"},{"id":"874","location":{"end":{"column":3,"line":697},"start":{"column":61,"line":683}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"842","location":{"end":{"column":20,"line":647},"start":{"column":6,"line":647}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"785","location":{"end":{"column":3,"line":634},"start":{"column":53,"line":602}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"875","location":{"end":{"column":35,"line":684},"start":{"column":18,"line":684}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"877","location":{"end":{"column":35,"line":684},"start":{"column":18,"line":684}},"mutatorName":"EqualityOperator","replacement":"uri[offset] !== '%'","status":"Killed"},{"id":"880","location":{"end":{"column":23,"line":686},"start":{"column":6,"line":686}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"846","location":{"end":{"column":2,"line":671},"start":{"column":91,"line":662}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"882","location":{"end":{"column":23,"line":686},"start":{"column":6,"line":686}},"mutatorName":"EqualityOperator","replacement":"symbol.length !== 3","status":"Killed"},{"id":"876","location":{"end":{"column":35,"line":684},"start":{"column":18,"line":684}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"879","location":{"end":{"column":64,"line":684},"start":{"column":56,"line":684}},"mutatorName":"ArithmeticOperator","replacement":"offset - 3","status":"Killed"},{"id":"884","location":{"end":{"column":27,"line":687},"start":{"column":7,"line":687}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"858","location":{"end":{"column":26,"line":675},"start":{"column":5,"line":675}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"878","location":{"end":{"column":35,"line":684},"start":{"column":32,"line":684}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"886","location":{"end":{"column":27,"line":687},"start":{"column":7,"line":687}},"mutatorName":"BooleanLiteral","replacement":"pctenc.test(symbol)","status":"Killed"},{"id":"888","location":{"end":{"column":31,"line":693},"start":{"column":6,"line":693}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"890","location":{"end":{"column":31,"line":693},"start":{"column":6,"line":693}},"mutatorName":"EqualityOperator","replacement":"nextStateId !== undefined","status":"Killed"},{"id":"891","location":{"end":{"column":12,"line":695},"start":{"column":6,"line":695}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"865","location":{"end":{"column":27,"line":680},"start":{"column":18,"line":680}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"893","location":{"end":{"column":12,"line":695},"start":{"column":6,"line":695}},"mutatorName":"BooleanLiteral","replacement":"state","status":"Killed"},{"id":"866","location":{"end":{"column":26,"line":680},"start":{"column":19,"line":680}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"895","location":{"end":{"column":14,"line":701},"start":{"column":5,"line":701}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"896","location":{"end":{"column":14,"line":701},"start":{"column":5,"line":701}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"897","location":{"end":{"column":14,"line":701},"start":{"column":5,"line":701}},"mutatorName":"BooleanLiteral","replacement":"solution","status":"Killed"},{"id":"885","location":{"end":{"column":27,"line":687},"start":{"column":7,"line":687}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"887","location":{"end":{"column":5,"line":689},"start":{"column":28,"line":687}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"883","location":{"end":{"column":4,"line":691},"start":{"column":24,"line":686}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"881","location":{"end":{"column":23,"line":686},"start":{"column":6,"line":686}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"889","location":{"end":{"column":31,"line":693},"start":{"column":6,"line":693}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"892","location":{"end":{"column":12,"line":695},"start":{"column":6,"line":695}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"894","location":{"end":{"column":44,"line":696},"start":{"column":16,"line":696}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"\"use strict\";\n\nmodule.exports.Router = Router;\n\nconst { Node, reduce, parallel, union, concat, optional, star, fromString, compare } = require('./lib/fsm.js');\n\n// Export a function that docs/demo.js uses\n// FIXME this might be relocated later\nmodule.exports.compare = require('./lib/fsm.js').compare;\n\nconst RANGE = {};\nRANGE.UNRES = ['-', '.', '0-9', 'A-Z', '_', 'a-z', '~'].join('');\nRANGE.GEN_D = [':', '/', '?', '#', '[', ']', '@'].join('');\nRANGE.SUB_D = ['!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '='].join('');\nRANGE.RESER = [RANGE.GEN_D, RANGE.SUB_D].join('');\nRANGE.URI = [RANGE.UNRES, RANGE.RESER].join('');\n\nconst regex_sc = /[.*+?^${}()|[\\]\\\\]/g;\nfunction regex_escape(str){\n\treturn str.replace(regex_sc, '\\\\$&');\n}\n\nconst regex_rangesc = /[\\\\\\]]/g;\nfunction range_regex(str){\n\treturn '(?:['+str.replace(regex_rangesc, '\\\\$&')+']|%[0-9A-Fa-f]{2})';\n}\n\nfunction range_fsm(str, uriTemplate, offset, variableOptions){\n\tif(variableOptions && variableOptions.minLength){\n\t\treturn [\n\t\t\tnew Node({[str]: 1}, {[uriTemplate]: new PartialMatch(offset, Value)}),\n\t\t\tnew Node({[str]: 1}, {[uriTemplate]: new PartialMatch(offset, Value)}, true),\n\t\t];\n\t}else{\n\t\treturn [ new Node({[str]: 0}, {[uriTemplate]: new PartialMatch(offset, Value)}, true) ];\n\t}\n}\n\nfunction encodeURIComponent_v(v){\n\treturn encodeURIComponent(v).replace(/!/g, '%21');\n}\n\nfunction Operator(prefix, separator, delimiter, range, named, form){\n\tthis.prefix = prefix;\n\tthis.separator = separator;\n\tthis.delimiter = delimiter;\n\tthis.range = range;\n\tthis.named = named;\n\tthis.form = form;\n\tthis.encode = (range===RANGE.URI) ? encodeURI_literal : encodeURIComponent_v;\n}\n\nconst operators = {\n\t'': new Operator( '',  ',', null, RANGE.UNRES, false),\n\t'+': new Operator('',  ',', null, RANGE.URI, false),\n\t'#': new Operator('#', ',', null, RANGE.URI, false),\n\t'.': new Operator('.', '.', '.',  RANGE.UNRES, false),\n\t'/': new Operator('/', '/', '/',  RANGE.UNRES, false),\n\t';': new Operator(';', ';', ';',  RANGE.UNRES, true, false),\n\t'?': new Operator('?', '&', '&',  RANGE.UNRES, true, true),\n\t'&': new Operator('&', '&', '&',  RANGE.UNRES, true, true),\n};\n\n// This technique works only because the 2-3rd characters in pct-encoding are also legal characters by themselves\nencodeURI_literal.pattern = new RegExp('[^'+RANGE.URI.replace(regex_rangesc, '\\\\$&')+'%'+']|%(?![0-9A-Fa-f]{2})', 'ug');\nfunction encodeURI_literal(v){\n\treturn v.replace(encodeURI_literal.pattern, function(a){\n\t\treturn encodeURIComponent(a);\n\t});\n}\n\nfunction Operator(prefix, separator, delimiter, range, named, form){\n\tthis.prefix = prefix;\n\tthis.separator = separator;\n\tthis.delimiter = delimiter;\n\tthis.range = range;\n\tthis.named = named;\n\tthis.form = form;\n\tthis.encode = (range===RANGE.URI) ? encodeURI_literal : encodeURIComponent_v;\n}\n\nfunction Router(){\n\tthis.clear();\n}\n\nRouter.prototype.clear = function clear(){\n\tthis.nid = 0;\n\tthis.states = [];\n\tthis.routeSet = new Set;\n\tthis.templateRouteMap = new Map;\n\tthis.valueRouteMap = new Map;\n\tthis.hierarchy = {children: []};\n};\n\nRouter.prototype.hasRoute = function hasRoute(route){\n\treturn this.routeSet.has(route);\n};\n\nObject.defineProperty(Router.prototype, \"size\", {\n\tget: function sizeGet(){ return this.routeSet.size; },\n});\n\nObject.defineProperty(Router.prototype, \"routes\", {\n\tget: function routesGet(){ return Array.from(this.routeSet); },\n});\n\nRouter.prototype.getTemplate = function getTemplate(uriTemplate){\n\tif(typeof uriTemplate !== 'string') throw new Error('Expected string `uriTemplate`');\n\treturn this.templateRouteMap.get(uriTemplate);\n};\n\nRouter.prototype.hasTemplate = function hasTemplate(uriTemplate){\n\tif(typeof uriTemplate !== 'string') throw new Error('Expected string `uriTemplate`');\n\treturn this.templateRouteMap.has(uriTemplate);\n};\n\nRouter.prototype.getValue = function getValue(matchValue){\n\treturn this.valueRouteMap.get(matchValue);\n};\n\nRouter.prototype.hasValue = function hasValue(matchValue){\n\treturn this.valueRouteMap.has(matchValue);\n};\n\nconst Literal = ('Literal');\n// const Prefix = ('Prefix');\nconst Value = ('Value');\n\nmodule.exports.PartialMatch = PartialMatch;\nfunction PartialMatch(position, type, open, close){\n\tif(!type) throw new Error('Expected a Type');\n\tthis.position = position;\n\tthis.type = type;\n\tthis.open = open || []; // list of groups that open\n\tthis.close = close || []; // list of groups that open\n}\n\nmodule.exports.FinalMatch = FinalMatch;\nfunction FinalMatch(route, close){\n\tthis.route = route;\n\tthis.close = close;\n}\nFinalMatch.prototype.toString = function toString(){\n\treturn '<'+this.route.uriTemplate+'>';\n};\n\nvar rule_literals = /([\\x21\\x23-\\x24\\x26\\x28-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E\\xA0-\\uD7FF\\uE000-\\uFDCF\\uFDF0-\\uFFEF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|%[0-9A-Fa-f][0-9A-Fa-f])/;\nvar rule_varspec = /^([0-9A-Za-z_]|%[0-9A-Fa-f]{2})(\\.?([0-9A-Za-z_]|%[0-9A-Fa-f]{2}))*(:[0-9]{0,3}|\\*)?$/;\n\nmodule.exports.Route = Route;\nfunction Route(uriTemplate, options, matchValue){\n\tif(typeof uriTemplate!=='string') throw new Error('Expected `uriTemplate` to be a string');\n\tthis.uriTemplate = uriTemplate;\n\tthis.options = options || {};\n\tthis.matchValue = this.options.matchValue!==undefined ? this.options.matchValue : matchValue;\n\n\t// Parse the URI template\n\tvar varnames = this.varnames = {};\n\tvar variables = this.variables = [];\n\tvar tokens = this.tokens = [];\n\tvar expressionList = [];\n\tfor(var uri_i=0; uri_i<uriTemplate.length; uri_i++){\n\t\tvar chr = uriTemplate[uri_i];\n\t\tif(chr==='%'){\n\t\t\t// A pct-encoded sequence is treated as a single character for efficiency\n\t\t\t// (this more than halves the size of the tree)\n\t\t\tif(uriTemplate.substring(uri_i, uri_i+3).match(/^%[0-9A-F]{2}$/)){\n\t\t\t\tchr += uriTemplate[uri_i+1] + uriTemplate[uri_i+2];\n\t\t\t\turi_i += 2;\n\t\t\t}else{\n\t\t\t\tthrow new Error('Invalid pct-encoded sequence '+JSON.stringify(uriTemplate.substring(uri_i, uri_i+3)));\n\t\t\t}\n\t\t}\n\t\tif(chr=='{'){\n\t\t\tvar endpos = uriTemplate.indexOf('}', uri_i+2);\n\t\t\tif(endpos<0) throw new Error('Unclosed expression: Expected \"}\" but found end of template');\n\t\t\tvar patternBody = uriTemplate.substring(uri_i+1, endpos);\n\t\t\turi_i = endpos;\n\t\t\t// If the first character is part of a valid variable name, assume the default operator\n\t\t\t// Else, assume the first character is a operator\n\t\t\tvar operatorChar = patternBody[0].match(/[a-zA-Z0-9_%]/) ? '' : patternBody[0] ;\n\t\t\tvar operator = operators[operatorChar];\n\t\t\tif(!operator){\n\t\t\t\tthrow new Error('Unknown expression operator: '+JSON.stringify(operatorChar));\n\t\t\t}\n\t\t\tconst expression = Expression.from(patternBody, options);\n\t\t\texpression.variableList.forEach(function(varspec){\n\t\t\t\tvarspec.index = Object.keys(varnames).length;\n\t\t\t\tvarnames[varspec.varname] = varspec;\n\t\t\t\tvariables[varspec.index] = varspec;\n\t\t\t});\n\t\t\texpressionList.push(expression);\n\t\t\ttokens.push(expression);\n\t\t}else if(chr.match(rule_literals)){\n\t\t\tif(typeof tokens[tokens.length-1]=='string') tokens[tokens.length-1] += chr;\n\t\t\telse tokens.push(chr);\n\t\t}else{\n\t\t\tthrow new Error('Unexpected character '+JSON.stringify(chr));\n\t\t}\n\t}\n\n\tthis.fsm = reduce(this.toFSM());\n\n\tfunction partial_intersect(states){\n\t\tif(states[0]) return states[0].partials;\n\t}\n\tfunction final_intersect(states){\n\t\tif(states.every(final => final && (Array.isArray(final) ? final.length : final))){\n\t\t\tconst items = states.flatMap(final => (final && Array.isArray(final)) ? final : []);\n\t\t\treturn items.length ? items : true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif(options && options.parent){\n\t\tvar parent = options.parent;\n\t\tif(typeof options.parent=='object'){\n\t\t\tparent = options.parent;\n\t\t}else if(typeof options.parent==='string'){\n\t\t\tparent = new Route(options.parent);\n\t\t}else{\n\t\t\tthrow new Error('Unknown type for parent');\n\t\t}\n\t\tthis.fsm = parallel([this.fsm, parent.fsm], partial_intersect, final_intersect);\n\t}\n}\nRoute.prototype.gen = function Route_gen(params){\n\tif(typeof params!='object') throw new Error('Expected arguments[0] `params` to be an object');\n\treturn this.tokens.map( (v)=>v.toString(params) ).join('');\n};\nRoute.prototype.toString = function toString(params){\n\treturn this.tokens.map( (v)=>v.toString(params) ).join('');\n};\nRoute.prototype.compare = function routecompare(other){\n\treturn compare([this.fsm || this.toFSM(), other.fsm || other.toFSM()]);\n}\nRoute.prototype.toJSON = function toJSON(){\n\treturn this.uriTemplate;\n};\nRoute.prototype.toFSM = function toFSM(){\n\tconst route = this;\n\tvar template_i = 0;\n\n\t// Get the FSM of each of the tokens, and concatenate them together\n\tconst fsms = route.tokens.map(function addExpression(expression){\n\t\t// If a string, treat as literal characters\n\t\tif(typeof expression=='string'){\n\t\t\tconst offset = template_i;\n\t\t\ttemplate_i += expression.length;\n\t\t\treturn fromString(expression, v=>({[route.uriTemplate]:new PartialMatch((offset+v), Literal)}));\n\t\t}\n\t\treturn expression.toFSM(route.uriTemplate, template_i);\n\t});\n\treturn concat(fsms);\n\t// return reduce(concat(fsms));\n};\nRoute.prototype.toRegex = function toRegex(){\n\tconst regex_str = this.tokens.map(function(segment){\n\t\tif(typeof segment==='string'){\n\t\t\treturn regex_escape(segment);\n\t\t}else{\n\t\t\treturn segment.toRegex().source;\n\t\t}\n\t}).join('');\n\treturn new RegExp('^'+regex_str+'$', 'u');\n};\nRoute.prototype.decode = function decode(uri){\n\tconst regex = this.toRegex();\n\tconst match = uri.match(regex);\n\tif(!match) return;\n\n\tvar offset = 1;\n\tconst result = {};\n\tfor(var i=0; i<this.tokens.length; i++){\n\t\tconst segment = this.tokens[i];\n\t\t// This segment is not an expression, there's nothing to parse here\n\t\tif(typeof segment === 'string') continue;\n\t\tfor(var j=0; j<segment.variableList.length; j++){\n\t\t\tconst varname = segment.variableList[j].varname;\n\t\t\tconst value = match[offset++];\n\t\t\tif(typeof value === 'string'){\n\t\t\t\tif(segment.variableList[j].explode){\n\t\t\t\t\t// If the variable is exploded, split it apart by the separator since toRegex matched it as a single string\n\t\t\t\t\tif(segment.variableList[j].named){\n\t\t\t\t\t\t// Also if this is a named variable, the string includes \"varname=\" in each segment\n\t\t\t\t\t\tresult[varname] = value.split(segment.separator).map(decodeURIComponent).map( v => v.replace(new RegExp('^'+regex_escape(segment.variableList[j].varname)+'=', 'ug'), '') );\n\t\t\t\t\t}else{\n\t\t\t\t\t\tresult[varname] = value.split(segment.separator).map(decodeURIComponent);\n\t\t\t\t\t}\n\t\t\t\t}else if(value){\n\t\t\t\t\tresult[varname] = decodeURI(value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nmodule.exports.Expression = Expression;\nfunction Expression(operatorChar, variableList){\n\tif(typeof operatorChar !== 'string') throw new Error('Expected `operatorChar` to be a string');\n\tif(!operators[operatorChar]) throw new Error('Unknown operator: '+JSON.stringify(operatorChar));\n\tvariableList.forEach(function(v){\n\t\tif(!(v instanceof Variable)) throw new Error('Expected `variableList` to be array of Variable instances');\n\t});\n\tthis.operatorChar = operatorChar;\n\tthis.prefix = operators[operatorChar].prefix;\n\tthis.separator = operators[operatorChar].separator;\n\tthis.range = operators[operatorChar].range;\n\tthis.variableList = variableList;\n}\nExpression.from = function(patternBody, templateOptions){\n\t// If the first character is part of a valid variable name, assume the default operator\n\t// Else, assume the first character is a operator\n\tvar operatorChar = patternBody[0].match(/[a-zA-Z0-9_%]/) ? '' : patternBody[0] ;\n\tvar operator = operators[operatorChar];\n\tif(!operator){\n\t\tthrow new Error('Unknown expression operator: '+JSON.stringify(operator));\n\t}\n\tconst variableList = patternBody\n\t\t.substring(operatorChar.length)\n\t\t.split(/,/g)\n\t\t.map( varspec => Variable.from(operatorChar, varspec, templateOptions) );\n\treturn new Expression(operatorChar, variableList);\n};\nExpression.prototype.toString = function toString(params){\n\tconst operator = operators[this.operatorChar];\n\tif(params){\n\t\tconst values = this.variableList.map( (v)=>v.expand(params) ).filter( (v)=>(typeof v==='string') );\n\t\tif(values.length){\n\t\t\treturn operator.prefix + values.join(operator.separator);\n\t\t}else{\n\t\t\treturn '';\n\t\t}\n\t}else{\n\t\t// toString will join the Variable#toString() values with commas\n\t\treturn '{' + this.operatorChar + this.variableList.toString() + '}';\n\t}\n};\nExpression.prototype.toFSM = function toFSM(uriTemplate, offset){\n\tvar offset_i = offset;\n\tconst fsm_0 = [];\n\tfor(var i=0; i<this.variableList.length; i++){\n\t\tif(i==0 && this.prefix){\n\t\t\tfsm_0.push(concat([ fromString(this.prefix), this.variableList[i].toFSM(uriTemplate, offset_i) ]));\n\t\t\toffset_i += 1;\n\t\t}else if(i>0 && this.separator){\n\t\t\tfsm_0.push(concat([ fromString(this.separator), this.variableList[i].toFSM(uriTemplate, offset_i) ]));\n\t\t\toffset_i += 1;\n\t\t}else{\n\t\t\tfsm_0.push(this.variableList[i].toFSM(uriTemplate, offset_i));\n\t\t}\n\t\toffset_i += this.variableList[i].varname.length;\n\t}\n\treturn optional(concat(fsm_0));\n};\nExpression.prototype.toRegex = function toRegex(){\n\tvar fsm_0 = '';\n\tif(this.prefix){\n\t\tfsm_0 += regex_escape(this.prefix);\n\t}\n\tfor(var i=0; i<this.variableList.length; i++){\n\t\tif(i>0 && this.separator){\n\t\t\tfsm_0 += '(?:' + regex_escape(this.separator) + this.variableList[i].toRegex().source + ')?';\n\t\t}else{\n\t\t\tfsm_0 += this.variableList[i].toRegex().source;\n\t\t}\n\t}\n\t// The entire expression is optional\n\treturn new RegExp('(?:'+fsm_0+')?', 'u');\n}\n\nmodule.exports.Variable = Variable;\nfunction Variable(operatorChar, varname, explode, maxLength, variableOptions){\n\tif(typeof varname !== 'string') throw new Error('Expected `varname` to be a string');\n\tif(typeof operatorChar !== 'string') throw new Error('Expected `operatorChar` to be a string');\n\tconst operator = operators[operatorChar];\n\tif(!operators[operatorChar]) throw new Error('Expected `operator` to be a valid operator');\n\tif(typeof explode !== 'boolean') throw new Error('Expected `explode` to be a boolean');\n\tif(maxLength!==null && typeof maxLength !== 'number') throw new Error('Expected `maxLength` to be a number');\n\tthis.operatorChar = operatorChar;\n\tthis.varname = varname;\n\tthis.explode = explode;\n\tthis.maxLength = maxLength;\n\tthis.variableOptions = variableOptions;\n\tthis.prefix = operator.prefix;\n\tthis.separator = operator.separator;\n\tthis.delimiter = operator.delimiter;\n\tthis.range = operator.range;\n\tthis.named = operator.named;\n}\nVariable.from = function(operatorChar, varspec, templateOptions){\n\tif(!varspec.match(rule_varspec)){\n\t\tthrow new Error('Malformed variable '+JSON.stringify(varspec));\n\t}\n\tconst separator = operators[operatorChar];\n\t// Test for explode operator\n\tconst explode = !!varspec.match(/\\*$/);\n\tconst varnameMaxLength = explode ? varspec.substring(0, varspec.length-1) : varspec;\n\tif(explode && !separator){\n\t\tthrow new Error('Variable operator '+JSON.stringify(operatorChar)+' does not work with explode modifier');\n\t}\n\t// Test for substring modifier\n\tconst varnameMaxLength_i = varnameMaxLength.indexOf(':');\n\tconst varname = varnameMaxLength_i<0 ? varnameMaxLength : varnameMaxLength.substring(0, varnameMaxLength_i);\n\tconst maxLengthStr = varnameMaxLength_i<0 ? null : varnameMaxLength.substring(varnameMaxLength_i+1);\n\tconst maxLength = maxLengthStr ? parseInt(maxLengthStr, 10) : null;\n\tconst variableOptions = templateOptions && templateOptions.variables && templateOptions.variables[varname];\n\treturn new Variable(\n\t\toperatorChar,\n\t\tvarname,\n\t\texplode,\n\t\tmaxLength,\n\t\tvariableOptions\n\t);\n};\nVariable.prototype.toString = function(params){\n\tif(params) return this.expand(params);\n\treturn this.varname +\n\t\t(this.explode ? '*' : '') +\n\t\t(typeof this.maxLength==='number' ? ':'+this.maxLength : '');\n};\nVariable.prototype.expand = function(params){\n\tconst t = this;\n\tconst op = operators[t.operatorChar];\n\tconst varvalue = params[t.varname];\n\tconst encode = op.encode;\n\tif(typeof varvalue=='string' || typeof varvalue=='number'){\n\t\tlet value = varvalue;\n\t\tif(t.maxLength) value = value.substring(0, t.maxLength);\n\t\tif(op.named){\n\t\t\tif(op.form || value) return t.varname + '=' + encode(value);\n\t\t\telse return t.varname;\n\t\t}else{\n\t\t\treturn encode(value);\n\t\t}\n\t}else if(Array.isArray(varvalue) && varvalue.length>0){\n\t\tif(t.explode){\n\t\t\tconst items = varvalue.map(function(value){\n\t\t\t\tif(t.maxLength) value = value.toString().substring(0, t.maxLength);\n\t\t\t\tif(op.named){\n\t\t\t\t\tif(op.form || value) return t.varname + '=' + encode(value);\n\t\t\t\t\telse return t.varname;\n\t\t\t\t}else{\n\t\t\t\t\treturn encode(value);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn items.length ? items.join(t.separator) : null;\n\t\t}else{\n\t\t\tlet value = varvalue;\n\t\t\tif(t.maxLength) value = value.substring(0, t.maxLength);\n\t\t\tif(value.length===0) return null;\n\t\t\tif(op.named){\n\t\t\t\treturn t.varname + '=' + value.map(function(v){ return encode(v); }).join(',');\n\t\t\t}else{\n\t\t\t\treturn value.map(function(v){ return encode(v); }).join(',');\n\t\t\t}\n\t\t}\n\t}else if(typeof varvalue == 'object' && varvalue){\n\t\tif(t.maxLength){\n\t\t\tthrow new Error('Cannot substring object');\n\t\t}\n\t\tif(t.explode){\n\t\t\t// Apparently op.named doesn't matter in this case\n\t\t\tconst items = Object.keys(varvalue).map(function(key){\n\t\t\t\tif(op.form || varvalue[key]) return encode(key) + '=' + encode(varvalue[key]);\n\t\t\t\telse return key;\n\t\t\t});\n\t\t\treturn items.length ? items.join(t.separator) : null;\n\t\t}else{\n\t\t\tif(op.named){\n\t\t\t\tconst items = Object.keys(varvalue).map(function(key){\n\t\t\t\t\treturn encode(key) + ',' + encode(varvalue[key]);\n\t\t\t\t});\n\t\t\t\treturn items.length ? t.varname + '=' + items.join(',') : null;\n\t\t\t}else{\n\t\t\t\tconst items = Object.keys(varvalue).map(function(key){\n\t\t\t\t\treturn encode(key) + ',' + encode(varvalue[key]);\n\t\t\t\t});\n\t\t\t\treturn items.length ? items.join(',') : null;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\nVariable.prototype.toFSM = function toFSM(uriTemplate, offset){\n\tconst op = operators[this.operatorChar];\n\tconst fsm = range_fsm(this.range, uriTemplate, offset, this.variableOptions);\n\tif(this.explode){\n\t\tif(op.named){\n\t\t\treturn optional(concat([concat([fromString(this.varname), optional(concat([fromString('='), fsm]))]), star(concat([fromString(this.separator), fromString(this.varname), optional(concat([fromString('='), fsm]))]))]));\n\t\t}else{\n\t\t\treturn optional(concat([fsm, star(concat([fromString(this.separator), fsm]))]));\n\t\t}\n\t}else if(op.named){\n\t\treturn optional(concat([fromString(this.varname), optional(concat([fromString('='), fsm]))]));\n\t}else{\n\t\treturn fsm;\n\t}\n}\nVariable.prototype.toRegex = function toRegex(){\n\tconst op = operators[this.operatorChar];\n\tif(this.explode){\n\t\tif(op.named){\n\t\t\treturn new RegExp('((?:'+regex_escape(this.varname)+'(?:=('+range_regex(this.range)+'*)))(?:'+this.separator+'(?:'+regex_escape(this.varname)+'(='+range_regex(this.range)+'*)))*)?', 'u');\n\t\t}else{\n\t\t\t// Include the separator in the range, we will split() it later\n\t\t\treturn new RegExp('('+range_regex(this.range+this.separator)+'*)', 'u');\n\t\t}\n\t}else if(op.named){\n\t\treturn new RegExp('(?:'+regex_escape(this.varname)+'(?:=('+range_regex(this.range)+'*))?)?', 'u');\n\t}else{\n\t\treturn new RegExp('('+range_regex(this.range)+'*)', 'u');\n\t}\n}\n\nmodule.exports.Result = Result;\nfunction Result(router, uri, options, history, final_states){\n\tconst final_match = final_states[0];\n\tif(!final_match) throw new Error();\n\tconst route = final_match.route;\n\tthis.router = router;\n\tthis.uri = uri;\n\tthis.options = options;\n\tthis.route = route;\n\tthis.uriTemplate = route.uriTemplate;\n\tthis.matchValue = route.matchValue;\n\tthis.params = route.decode(this.uri);\n\tthis.history = history;\n\tthis.final_states = final_states;\n}\n\nResult.prototype.rewrite = function rewrite(uriTemplate, options){\n\tif(!(uriTemplate instanceof Route)){\n\t\tthrow new Error('Expected argument `uriTemplate` to be a Route');\n\t}\n\tvar uri = uriTemplate.gen(this.params);\n\treturn new Result(this.router, uri, options, [], [ { route: uriTemplate } ]);\n};\n\nResult.prototype.next = function next(){\n\t// return this.router.resolveURI(this.uri, this.options, this.remaining_state);\n\t// With all of the characters parsed, the current \"state\" contains the solution\n\tconst remaining_states = this.final_states.slice(1);\n\t// ... If it lists one\n\tif(!remaining_states.length) return;\n\treturn new Result(this.router, this.uri, this.options, this.history, remaining_states);\n};\n\nObject.defineProperty(Result.prototype, \"template\", {\n\tget: function templateGet(){ return this.uriTemplate; },\n\tset: function templateSet(v){ this.uriTemplate = v; },\n});\n\nObject.defineProperty(Result.prototype, \"name\", {\n\tget: function templateGet(){ return this.matchValue; },\n});\n\nRouter.prototype.addTemplate = function addTemplate(uriTemplate, options, matchValue){\n\tif(typeof uriTemplate=='object' && options===undefined && matchValue===undefined){\n\t\tvar route = uriTemplate;\n\t\turiTemplate = route.uriTemplate;\n\t\toptions = route.options;\n\t\tmatchValue = route.matchValue;\n\t}else{\n\t\troute = new Route(uriTemplate, options, matchValue);\n\t}\n\n\t// Verify the template doesn't re-use a variable name\n\tconst varnames = new Set;\n\troute.tokens.forEach(function(token){\n\t\tif(typeof token === 'string') return;\n\t\ttoken.variableList.forEach(function(varspec){\n\t\t\tif(varnames.has(varspec.varname)){\n\t\t\t\tthrow new Error('Duplicate variable name '+varspec.varname);\n\t\t\t}\n\t\t\tvarnames.add(varspec.varname);\n\t\t});\n\t});\n\n\tconst fsm = route.fsm;\n\n\tfsm.forEach(function(state){\n\t\tif(!state.partials[uriTemplate]){\n\t\t\t// state.partials[uriTemplate] = new PartialMatch(0, 9);\n\t\t}\n\t\tif(state.final){\n\t\t\tstate.final = [new FinalMatch(route)];\n\t\t}\n\t});\n\n\tthis.routeSet.add(route);\n\tthis.templateRouteMap.set(uriTemplate, route);\n\tif(!this.valueRouteMap.has(matchValue)){\n\t\tthis.valueRouteMap.set(matchValue, route);\n\t}\n\n\t// Update the route tree that maintains ordering\n\t// For every node, all of its children must be disjoint\n\t// Scan through each of the children:\n\tchildren: for(var current=this.hierarchy; current;){\n\t\tconst compares = current.children.map(v => compare([fsm, v.node.fsm]));\n\n\t\t// 1. if new route is a subset of exactly one of them, then descend into that child.\n\t\tfor(var i=0; i<compares.length; i++){\n\t\t\tif(compares[i][0]===false && compares[i][1]===true){\n\t\t\t\tcurrent = current.children[i];\n\t\t\t\tcontinue children;\n\t\t\t}\n\t\t}\n\n\t\t// 2. if the new route is a superset of any number of them (and disjoint with all others), then insert new route as a child and move all matching children underneath it.\n\t\tconst route_siblings = [], route_children = [];\n\t\tfor(var i=0; i<compares.length; i++){\n\t\t\tif(compares[i][0]===true){\n\t\t\t\tif(compares[i][1]===true){\n\t\t\t\t\t// This is the same as an existing route\n\t\t\t\t\tthrow new Error('Inserted route '+uriTemplate+' is the same as other route '+current.children[i].uriTemplate);\n\t\t\t\t}else{\n\t\t\t\t\t// Move subsets into this route\n\t\t\t\t\troute_children.push(current.children[i]);\n\t\t\t\t}\n\t\t\t}else if(compares[i][2]===true){\n\t\t\t\t// Record disjoint nodes and make them siblings\n\t\t\t\troute_siblings.push(current.children[i]);\n\t\t\t}else{\n\t\t\t\tthrow new Error('Inserted route '+uriTemplate+' partially overlaps with other routes '+current.children[i].uriTemplate);\n\t\t\t}\n\t\t}\n\t\troute_siblings.push({node: route, uriTemplate, children: route_children});\n\t\tcurrent.children = route_siblings;\n\t\tbreak;\n\t}\n\n\tthis.reindex();\n\n\treturn route;\n};\n\nRouter.prototype.reindex = function reindex(){\n\t// Update the sort index based on the hierarchy\n\tconst order_map = new Map;\n\tvar order = 0;\n\tfunction visit(hierarchy){\n\t\thierarchy.children.forEach(visit);\n\t\tif(hierarchy.node) order_map.set(hierarchy.node, order++);\n\t}\n\tvisit(this.hierarchy);\n\n\tthis.states = union(this.routes.map(r => r.fsm), order_map);\n};\n\n// like resolveString, but additionally verify that the URI matches the legal HTTP form\n// userinfo and fragment components are not allowed\n// Router.prototype.resolveRequest = function resolveRequest(scheme, host, target, flags, initial_state){\n// };\n\n// like resolveString, but additionally verify that the URI matches the legal HTTP form\n// userinfo and fragment components are not allowed\n\nRouter.prototype.resolveRequestURI = function resolveRequestURI(uri, flags, initial_state){\n\tif(typeof uri!=='string') throw new Error('Expected arguments[0] `uri` to be a string');\n\t// First verify the URI looks OK, save the components, then parse it normally\n\t// scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tconst scheme_m = uri.match(/^([a-zA-Z][a-zA-Z0-9+.-]*):/);\n\tif(!scheme_m) throw new Error('parseURI: `uri` missing valid scheme');\n\t// const hierpart_m = uri.substring(scheme_m[0].length).match(/^\\/\\/(?:\\x5b(?:[\\x2e0-:a-f]*|v[0-9a-f]+\\x2e[!\\x24&-\\x2e0-;=_a-z~]+)\\x5d|(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\x2e(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\x2e(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\x2e(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])|(?:[\\x2d\\x2e0-9_a-z~]|%[0-9a-f][0-9a-f]|[!\\x24&-,;=])*)(?::\\d*)?/);\n\t// URI appears to be valid, now resolve it normally\n\treturn this.resolveURI(uri, flags, initial_state);\n};\n\n// TODO rename this to `resolveString`\nRouter.prototype.resolveURI = function resolveString(uri, flags){\n\tif(typeof uri!=='string') throw new Error('Expected arguments[0] `uri` to be a string');\n\tconst self = this;\n\t// 0 is the initial state\n\tvar state = this.states[0];\n\tif(!state) return;\n\tconst history = [{state}];\n\tconst pctenc = /^%[0-9A-F]{2}$/;\n\n\tfor(var offset = 0; state && offset < uri.length; offset++){\n\t\tconst symbol = uri[offset]==='%' ? uri.slice(offset, offset+3) : uri[offset];\n\t\t// Double-check that pct-encoded sequences are valid (in addition to what the FSM should prohibit)\n\t\tif(symbol.length===3){\n\t\t\tif(!pctenc.test(symbol)){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toffset += 2;\n\t\t}\n\t\tconst nextStateId = state.get(symbol);\n\t\tif(nextStateId === undefined) return;\n\t\tstate = this.states[nextStateId];\n\t\tif(!state) return;\n\t\thistory.push({symbol, nextStateId, state});\n\t}\n\n\t// With all of the characters parsed, the current \"state\" contains the solution \n\tconst solution = state.final[0];\n\tif(!solution) return;\n\treturn new Result(self, uri, flags, history, state.final);\n};\n"},"/Users/awright/Projects/uri-template-router/lib/fsm.js":{"language":"javascript","mutants":[{"id":"898","location":{"end":{"column":2,"line":16},"start":{"column":21,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"899","location":{"end":{"column":27,"line":5},"start":{"column":15,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"901","location":{"end":{"column":27,"line":5},"start":{"column":15,"line":5}},"mutatorName":"EqualityOperator","replacement":"i >= str.length","status":"Killed"},{"id":"903","location":{"end":{"column":3,"line":15},"start":{"column":33,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"905","location":{"end":{"column":47,"line":7},"start":{"column":6,"line":7}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"908","location":{"end":{"column":35,"line":7},"start":{"column":6,"line":7}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"909","location":{"end":{"column":35,"line":7},"start":{"column":6,"line":7}},"mutatorName":"LogicalOperator","replacement":"chr !== '-' || str[i + 1] === '-'","status":"Killed"},{"id":"911","location":{"end":{"column":17,"line":7},"start":{"column":6,"line":7}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"912","location":{"end":{"column":17,"line":7},"start":{"column":6,"line":7}},"mutatorName":"EqualityOperator","replacement":"chr === '-'","status":"Killed"},{"id":"914","location":{"end":{"column":35,"line":7},"start":{"column":21,"line":7}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"915","location":{"end":{"column":35,"line":7},"start":{"column":21,"line":7}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"916","location":{"end":{"column":35,"line":7},"start":{"column":21,"line":7}},"mutatorName":"EqualityOperator","replacement":"str[i + 1] !== '-'","status":"Killed"},{"id":"917","location":{"end":{"column":28,"line":7},"start":{"column":25,"line":7}},"mutatorName":"ArithmeticOperator","replacement":"i - 1","status":"Killed"},{"id":"918","location":{"end":{"column":35,"line":7},"start":{"column":32,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"904","location":{"end":{"column":47,"line":7},"start":{"column":6,"line":7}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"920","location":{"end":{"column":4,"line":12},"start":{"column":48,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"921","location":{"end":{"column":64,"line":8},"start":{"column":58,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"906","location":{"end":{"column":47,"line":7},"start":{"column":6,"line":7}},"mutatorName":"LogicalOperator","replacement":"chr !== '-' && str[i + 1] === '-' || str[i + 2]","status":"Killed"},{"id":"922","location":{"end":{"column":55,"line":8},"start":{"column":52,"line":8}},"mutatorName":"ArithmeticOperator","replacement":"i - 2","status":"Killed"},{"id":"924","location":{"end":{"column":64,"line":8},"start":{"column":58,"line":8}},"mutatorName":"EqualityOperator","replacement":"j > end","status":"Killed"},{"id":"907","location":{"end":{"column":35,"line":7},"start":{"column":6,"line":7}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"926","location":{"end":{"column":5,"line":10},"start":{"column":70,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"927","location":{"end":{"column":4,"line":14},"start":{"column":8,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"928","location":{"end":{"column":2,"line":36},"start":{"column":44,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"929","location":{"end":{"column":33,"line":25},"start":{"column":5,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"900","location":{"end":{"column":27,"line":5},"start":{"column":15,"line":5}},"mutatorName":"EqualityOperator","replacement":"i <= str.length","status":"Survived"},{"id":"931","location":{"end":{"column":33,"line":25},"start":{"column":5,"line":25}},"mutatorName":"EqualityOperator","replacement":"typeof partials !== 'number'","status":"Killed"},{"id":"910","location":{"end":{"column":17,"line":7},"start":{"column":6,"line":7}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"913","location":{"end":{"column":17,"line":7},"start":{"column":14,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"919","location":{"end":{"column":46,"line":7},"start":{"column":43,"line":7}},"mutatorName":"ArithmeticOperator","replacement":"i - 2","status":"Survived"},{"id":"923","location":{"end":{"column":64,"line":8},"start":{"column":58,"line":8}},"mutatorName":"EqualityOperator","replacement":"j < end","status":"Survived"},{"id":"936","location":{"end":{"column":38,"line":27},"start":{"column":21,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"937","location":{"end":{"column":38,"line":27},"start":{"column":21,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"938","location":{"end":{"column":38,"line":27},"start":{"column":21,"line":27}},"mutatorName":"LogicalOperator","replacement":"transitions && {}","status":"Killed"},{"id":"932","location":{"end":{"column":33,"line":25},"start":{"column":25,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"930","location":{"end":{"column":33,"line":25},"start":{"column":5,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"933","location":{"end":{"column":27,"line":26},"start":{"column":13,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"942","location":{"end":{"column":29,"line":34},"start":{"column":15,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"943","location":{"end":{"column":29,"line":34},"start":{"column":15,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"944","location":{"end":{"column":29,"line":34},"start":{"column":15,"line":34}},"mutatorName":"LogicalOperator","replacement":"final && false","status":"Killed"},{"id":"945","location":{"end":{"column":29,"line":34},"start":{"column":24,"line":34}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"946","location":{"end":{"column":64,"line":35},"start":{"column":49,"line":35}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"934","location":{"end":{"column":27,"line":26},"start":{"column":13,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"948","location":{"end":{"column":64,"line":35},"start":{"column":54,"line":35}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"935","location":{"end":{"column":27,"line":26},"start":{"column":13,"line":26}},"mutatorName":"LogicalOperator","replacement":"partials && {}","status":"Survived"},{"id":"950","location":{"end":{"column":64,"line":35},"start":{"column":54,"line":35}},"mutatorName":"EqualityOperator","replacement":"v.length <= 1","status":"Killed"},{"id":"951","location":{"end":{"column":97,"line":35},"start":{"column":71,"line":35}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"952","location":{"end":{"column":97,"line":35},"start":{"column":80,"line":35}},"mutatorName":"ArithmeticOperator","replacement":"a.length + b.length","status":"Killed"},{"id":"953","location":{"end":{"column":2,"line":63},"start":{"column":39,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"954","location":{"end":{"column":40,"line":39},"start":{"column":5,"line":39}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"955","location":{"end":{"column":40,"line":39},"start":{"column":5,"line":39}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"956","location":{"end":{"column":40,"line":39},"start":{"column":5,"line":39}},"mutatorName":"EqualityOperator","replacement":"this.transitions[chr] === undefined","status":"Killed"},{"id":"957","location":{"end":{"column":3,"line":41},"start":{"column":41,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"902","location":{"end":{"column":32,"line":5},"start":{"column":29,"line":5}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"958","location":{"end":{"column":35,"line":44},"start":{"column":5,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"939","location":{"end":{"column":32,"line":32},"start":{"column":18,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"940","location":{"end":{"column":32,"line":32},"start":{"column":18,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"959","location":{"end":{"column":35,"line":44},"start":{"column":5,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"941","location":{"end":{"column":32,"line":32},"start":{"column":18,"line":32}},"mutatorName":"LogicalOperator","replacement":"partials && {}","status":"Survived"},{"id":"962","location":{"end":{"column":17,"line":44},"start":{"column":5,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"963","location":{"end":{"column":17,"line":44},"start":{"column":5,"line":44}},"mutatorName":"EqualityOperator","replacement":"chr[0] !== '%'","status":"Killed"},{"id":"964","location":{"end":{"column":17,"line":44},"start":{"column":14,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"966","location":{"end":{"column":35,"line":44},"start":{"column":21,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"967","location":{"end":{"column":35,"line":44},"start":{"column":21,"line":44}},"mutatorName":"EqualityOperator","replacement":"chr.length !== 3","status":"Killed"},{"id":"968","location":{"end":{"column":3,"line":50},"start":{"column":36,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"970","location":{"end":{"column":53,"line":45},"start":{"column":6,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"971","location":{"end":{"column":53,"line":45},"start":{"column":6,"line":45}},"mutatorName":"EqualityOperator","replacement":"this.transitions[\"-.0-9A-Z_a-z~\"] === undefined","status":"Killed"},{"id":"972","location":{"end":{"column":38,"line":45},"start":{"column":23,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"973","location":{"end":{"column":4,"line":47},"start":{"column":54,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"974","location":{"end":{"column":43,"line":46},"start":{"column":28,"line":46}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"960","location":{"end":{"column":35,"line":44},"start":{"column":5,"line":44}},"mutatorName":"LogicalOperator","replacement":"chr[0] === '%' || chr.length === 3","status":"Survived"},{"id":"961","location":{"end":{"column":17,"line":44},"start":{"column":5,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"947","location":{"end":{"column":64,"line":35},"start":{"column":54,"line":35}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"925","location":{"end":{"column":69,"line":8},"start":{"column":66,"line":8}},"mutatorName":"UpdateOperator","replacement":"j--","status":"Timeout"},{"id":"949","location":{"end":{"column":64,"line":35},"start":{"column":54,"line":35}},"mutatorName":"EqualityOperator","replacement":"v.length >= 1","status":"Survived"},{"id":"980","location":{"end":{"column":61,"line":48},"start":{"column":28,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"981","location":{"end":{"column":3,"line":58},"start":{"column":31,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"976","location":{"end":{"column":77,"line":47},"start":{"column":12,"line":47}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"975","location":{"end":{"column":77,"line":47},"start":{"column":12,"line":47}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"983","location":{"end":{"column":24,"line":52},"start":{"column":6,"line":52}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"985","location":{"end":{"column":4,"line":54},"start":{"column":25,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"984","location":{"end":{"column":24,"line":52},"start":{"column":6,"line":52}},"mutatorName":"BooleanLiteral","replacement":"rangeSets.has(tr)","status":"Killed"},{"id":"977","location":{"end":{"column":77,"line":47},"start":{"column":12,"line":47}},"mutatorName":"EqualityOperator","replacement":"this.transitions[\"-.0-9A-Z_a-z~:/?#[]@!$&'()*+,;=\"] === undefined","status":"Killed"},{"id":"987","location":{"end":{"column":32,"line":55},"start":{"column":6,"line":55}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"965","location":{"end":{"column":35,"line":44},"start":{"column":21,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"988","location":{"end":{"column":4,"line":57},"start":{"column":33,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"978","location":{"end":{"column":62,"line":47},"start":{"column":29,"line":47}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"990","location":{"end":{"column":95,"line":60},"start":{"column":5,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"986","location":{"end":{"column":32,"line":55},"start":{"column":6,"line":55}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"993","location":{"end":{"column":28,"line":60},"start":{"column":5,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"994","location":{"end":{"column":28,"line":60},"start":{"column":5,"line":60}},"mutatorName":"EqualityOperator","replacement":"chr !== \"-.0-9A-Z_a-z~\"","status":"Killed"},{"id":"979","location":{"end":{"column":4,"line":49},"start":{"column":78,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"995","location":{"end":{"column":28,"line":60},"start":{"column":13,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"997","location":{"end":{"column":95,"line":60},"start":{"column":32,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"998","location":{"end":{"column":95,"line":60},"start":{"column":32,"line":60}},"mutatorName":"EqualityOperator","replacement":"this.transitions[\"-.0-9A-Z_a-z~:/?#[]@!$&'()*+,;=\"] === undefined","status":"Killed"},{"id":"999","location":{"end":{"column":82,"line":60},"start":{"column":49,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"969","location":{"end":{"column":53,"line":45},"start":{"column":6,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1000","location":{"end":{"column":3,"line":62},"start":{"column":96,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1001","location":{"end":{"column":60,"line":61},"start":{"column":27,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1003","location":{"end":{"column":24,"line":67},"start":{"column":5,"line":67}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1005","location":{"end":{"column":24,"line":67},"start":{"column":5,"line":67}},"mutatorName":"BooleanLiteral","replacement":"Array.isArray(fsm)","status":"Killed"},{"id":"1002","location":{"end":{"column":2,"line":83},"start":{"column":21,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1007","location":{"end":{"column":50,"line":68},"start":{"column":19,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1004","location":{"end":{"column":24,"line":67},"start":{"column":5,"line":67}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1009","location":{"end":{"column":28,"line":71},"start":{"column":6,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1006","location":{"end":{"column":3,"line":69},"start":{"column":25,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1011","location":{"end":{"column":28,"line":71},"start":{"column":6,"line":71}},"mutatorName":"EqualityOperator","replacement":"typeof st === 'object'","status":"Killed"},{"id":"1012","location":{"end":{"column":28,"line":71},"start":{"column":20,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"989","location":{"end":{"column":95,"line":60},"start":{"column":5,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1014","location":{"end":{"column":53,"line":72},"start":{"column":20,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"992","location":{"end":{"column":28,"line":60},"start":{"column":5,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1016","location":{"end":{"column":49,"line":75},"start":{"column":7,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"996","location":{"end":{"column":95,"line":60},"start":{"column":32,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"991","location":{"end":{"column":95,"line":60},"start":{"column":5,"line":60}},"mutatorName":"LogicalOperator","replacement":"chr === \"-.0-9A-Z_a-z~\" || this.transitions[\"-.0-9A-Z_a-z~:/?#[]@!$&'()*+,;=\"] !== undefined","status":"Survived"},{"id":"1018","location":{"end":{"column":49,"line":75},"start":{"column":7,"line":75}},"mutatorName":"EqualityOperator","replacement":"typeof st.transitions[symbol] === 'number'","status":"Killed"},{"id":"1019","location":{"end":{"column":49,"line":75},"start":{"column":41,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1021","location":{"end":{"column":125,"line":76},"start":{"column":21,"line":76}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' + JSON.stringify(i) + '][' + JSON.stringify(symbol) + '] to be a number, got ' - typeof st[symbol]","status":"NoCoverage"},{"id":"1022","location":{"end":{"column":107,"line":76},"start":{"column":21,"line":76}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' + JSON.stringify(i) + '][' + JSON.stringify(symbol) - '] to be a number, got '","status":"NoCoverage"},{"id":"1023","location":{"end":{"column":82,"line":76},"start":{"column":21,"line":76}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' + JSON.stringify(i) + '][' - JSON.stringify(symbol)","status":"NoCoverage"},{"id":"1024","location":{"end":{"column":59,"line":76},"start":{"column":21,"line":76}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' + JSON.stringify(i) - ']['","status":"NoCoverage"},{"id":"1025","location":{"end":{"column":54,"line":76},"start":{"column":21,"line":76}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' - JSON.stringify(i)","status":"NoCoverage"},{"id":"1026","location":{"end":{"column":36,"line":76},"start":{"column":21,"line":76}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1027","location":{"end":{"column":59,"line":76},"start":{"column":55,"line":76}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1028","location":{"end":{"column":107,"line":76},"start":{"column":83,"line":76}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1029","location":{"end":{"column":43,"line":78},"start":{"column":7,"line":78}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"982","location":{"end":{"column":24,"line":52},"start":{"column":6,"line":52}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1013","location":{"end":{"column":4,"line":73},"start":{"column":29,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1008","location":{"end":{"column":3,"line":82},"start":{"column":29,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1032","location":{"end":{"column":43,"line":78},"start":{"column":7,"line":78}},"mutatorName":"EqualityOperator","replacement":"st.transitions[symbol] < fsm.length","status":"Killed"},{"id":"1034","location":{"end":{"column":109,"line":79},"start":{"column":21,"line":79}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' + JSON.stringify(i) + '][' + JSON.stringify(symbol) - '] to be a state in `fsm`'","status":"NoCoverage"},{"id":"1035","location":{"end":{"column":82,"line":79},"start":{"column":21,"line":79}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' + JSON.stringify(i) + '][' - JSON.stringify(symbol)","status":"NoCoverage"},{"id":"1036","location":{"end":{"column":59,"line":79},"start":{"column":21,"line":79}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' + JSON.stringify(i) - ']['","status":"NoCoverage"},{"id":"1037","location":{"end":{"column":54,"line":79},"start":{"column":21,"line":79}},"mutatorName":"ArithmeticOperator","replacement":"'Expected fsm[' - JSON.stringify(i)","status":"NoCoverage"},{"id":"1038","location":{"end":{"column":36,"line":79},"start":{"column":21,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1039","location":{"end":{"column":59,"line":79},"start":{"column":55,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1040","location":{"end":{"column":109,"line":79},"start":{"column":83,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1041","location":{"end":{"column":2,"line":110},"start":{"column":31,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1010","location":{"end":{"column":28,"line":71},"start":{"column":6,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1020","location":{"end":{"column":5,"line":77},"start":{"column":50,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1015","location":{"end":{"column":4,"line":81},"start":{"column":36,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1017","location":{"end":{"column":49,"line":75},"start":{"column":7,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1030","location":{"end":{"column":43,"line":78},"start":{"column":7,"line":78}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1043","location":{"end":{"column":31,"line":89},"start":{"column":16,"line":89}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1031","location":{"end":{"column":43,"line":78},"start":{"column":7,"line":78}},"mutatorName":"EqualityOperator","replacement":"st.transitions[symbol] > fsm.length","status":"Survived"},{"id":"1042","location":{"end":{"column":3,"line":96},"start":{"column":32,"line":87}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1049","location":{"end":{"column":28,"line":90},"start":{"column":7,"line":90}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1050","location":{"end":{"column":28,"line":90},"start":{"column":7,"line":90}},"mutatorName":"EqualityOperator","replacement":"states[i] !== undefined","status":"Killed"},{"id":"1052","location":{"end":{"column":3,"line":108},"start":{"column":30,"line":97}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1033","location":{"end":{"column":5,"line":80},"start":{"column":44,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1053","location":{"end":{"column":4,"line":100},"start":{"column":28,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1054","location":{"end":{"column":56,"line":99},"start":{"column":11,"line":99}},"mutatorName":"ArithmeticOperator","replacement":"ordering.get(a.route) + ordering.get(b.route)","status":"Killed"},{"id":"1056","location":{"end":{"column":82,"line":101},"start":{"column":6,"line":101}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1055","location":{"end":{"column":82,"line":101},"start":{"column":6,"line":101}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1057","location":{"end":{"column":81,"line":101},"start":{"column":18,"line":101}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1059","location":{"end":{"column":81,"line":101},"start":{"column":27,"line":101}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1058","location":{"end":{"column":81,"line":101},"start":{"column":27,"line":101}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1061","location":{"end":{"column":4,"line":105},"start":{"column":83,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1062","location":{"end":{"column":86,"line":102},"start":{"column":33,"line":102}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1063","location":{"end":{"column":72,"line":102},"start":{"column":43,"line":102}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1064","location":{"end":{"column":72,"line":102},"start":{"column":43,"line":102}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1065","location":{"end":{"column":72,"line":102},"start":{"column":43,"line":102}},"mutatorName":"LogicalOperator","replacement":"final || Array.isArray(final)","status":"Killed"},{"id":"1066","location":{"end":{"column":86,"line":102},"start":{"column":84,"line":102}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"1044","location":{"end":{"column":31,"line":89},"start":{"column":16,"line":89}},"mutatorName":"EqualityOperator","replacement":"i <= states.length","status":"Survived"},{"id":"1068","location":{"end":{"column":15,"line":103},"start":{"column":7,"line":103}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1069","location":{"end":{"column":38,"line":104},"start":{"column":34,"line":104}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"1045","location":{"end":{"column":31,"line":89},"start":{"column":16,"line":89}},"mutatorName":"EqualityOperator","replacement":"i >= states.length","status":"Survived"},{"id":"1047","location":{"end":{"column":4,"line":94},"start":{"column":37,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1072","location":{"end":{"column":2,"line":159},"start":{"column":40,"line":114}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1071","location":{"end":{"column":16,"line":106},"start":{"column":11,"line":106}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"1073","location":{"end":{"column":25,"line":115},"start":{"column":5,"line":115}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1048","location":{"end":{"column":28,"line":90},"start":{"column":7,"line":90}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1075","location":{"end":{"column":25,"line":115},"start":{"column":5,"line":115}},"mutatorName":"BooleanLiteral","replacement":"Array.isArray(fsms)","status":"Killed"},{"id":"1076","location":{"end":{"column":85,"line":115},"start":{"column":43,"line":115}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1077","location":{"end":{"column":47,"line":119},"start":{"column":29,"line":119}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1078","location":{"end":{"column":44,"line":119},"start":{"column":40,"line":119}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1051","location":{"end":{"column":5,"line":93},"start":{"column":36,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1074","location":{"end":{"column":25,"line":115},"start":{"column":5,"line":115}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1060","location":{"end":{"column":81,"line":101},"start":{"column":27,"line":101}},"mutatorName":"LogicalOperator","replacement":"final || (Array.isArray(final) ? final.length : final)","status":"Survived"},{"id":"1067","location":{"end":{"column":15,"line":103},"start":{"column":7,"line":103}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1084","location":{"end":{"column":42,"line":126},"start":{"column":15,"line":126}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1085","location":{"end":{"column":42,"line":126},"start":{"column":15,"line":126}},"mutatorName":"EqualityOperator","replacement":"i <= cross_product_list.length","status":"Killed"},{"id":"1086","location":{"end":{"column":42,"line":126},"start":{"column":15,"line":126}},"mutatorName":"EqualityOperator","replacement":"i >= cross_product_list.length","status":"Killed"},{"id":"1087","location":{"end":{"column":47,"line":126},"start":{"column":44,"line":126}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"1088","location":{"end":{"column":3,"line":156},"start":{"column":48,"line":126}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1089","location":{"end":{"column":49,"line":128},"start":{"column":30,"line":128}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1090","location":{"end":{"column":97,"line":132},"start":{"column":42,"line":132}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1091","location":{"end":{"column":97,"line":132},"start":{"column":95,"line":132}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"1092","location":{"end":{"column":4,"line":153},"start":{"column":32,"line":136}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1093","location":{"end":{"column":5,"line":140},"start":{"column":43,"line":137}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1094","location":{"end":{"column":40,"line":139},"start":{"column":12,"line":139}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1095","location":{"end":{"column":40,"line":139},"start":{"column":12,"line":139}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1096","location":{"end":{"column":40,"line":139},"start":{"column":12,"line":139}},"mutatorName":"LogicalOperator","replacement":"fsm_st || fsm_st.get(symbol)","status":"Killed"},{"id":"1097","location":{"end":{"column":33,"line":142},"start":{"column":30,"line":142}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1070","location":{"end":{"column":4,"line":107},"start":{"column":8,"line":105}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1098","location":{"end":{"column":27,"line":144},"start":{"column":7,"line":144}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1100","location":{"end":{"column":27,"line":144},"start":{"column":7,"line":144}},"mutatorName":"EqualityOperator","replacement":"nextId === undefined","status":"Killed"},{"id":"1101","location":{"end":{"column":5,"line":147},"start":{"column":28,"line":144}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1102","location":{"end":{"column":5,"line":152},"start":{"column":9,"line":147}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1103","location":{"end":{"column":98,"line":155},"start":{"column":81,"line":155}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1079","location":{"end":{"column":67,"line":121},"start":{"column":36,"line":121}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1082","location":{"end":{"column":61,"line":121},"start":{"column":58,"line":121}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1080","location":{"end":{"column":66,"line":121},"start":{"column":37,"line":121}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1104","location":{"end":{"column":98,"line":155},"start":{"column":86,"line":155}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1081","location":{"end":{"column":51,"line":121},"start":{"column":47,"line":121}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"1106","location":{"end":{"column":98,"line":155},"start":{"column":86,"line":155}},"mutatorName":"LogicalOperator","replacement":"v || v.final","status":"Killed"},{"id":"1105","location":{"end":{"column":98,"line":155},"start":{"column":86,"line":155}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1108","location":{"end":{"column":25,"line":163},"start":{"column":5,"line":163}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1107","location":{"end":{"column":2,"line":236},"start":{"column":22,"line":162}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1111","location":{"end":{"column":85,"line":163},"start":{"column":43,"line":163}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1112","location":{"end":{"column":3,"line":179},"start":{"column":39,"line":166}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1110","location":{"end":{"column":25,"line":163},"start":{"column":5,"line":163}},"mutatorName":"BooleanLiteral","replacement":"Array.isArray(fsms)","status":"Killed"},{"id":"1113","location":{"end":{"column":39,"line":172},"start":{"column":18,"line":172}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1114","location":{"end":{"column":37,"line":172},"start":{"column":20,"line":172}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1116","location":{"end":{"column":62,"line":173},"start":{"column":20,"line":173}},"mutatorName":"LogicalOperator","replacement":"i < fsms.length - 1 || fsms[i][substate].final","status":"Killed"},{"id":"1117","location":{"end":{"column":35,"line":173},"start":{"column":20,"line":173}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1115","location":{"end":{"column":62,"line":173},"start":{"column":20,"line":173}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1118","location":{"end":{"column":35,"line":173},"start":{"column":20,"line":173}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1119","location":{"end":{"column":35,"line":173},"start":{"column":20,"line":173}},"mutatorName":"EqualityOperator","replacement":"i <= fsms.length - 1","status":"Killed"},{"id":"1120","location":{"end":{"column":35,"line":173},"start":{"column":20,"line":173}},"mutatorName":"EqualityOperator","replacement":"i >= fsms.length - 1","status":"Killed"},{"id":"1121","location":{"end":{"column":35,"line":173},"start":{"column":22,"line":173}},"mutatorName":"ArithmeticOperator","replacement":"fsms.length + 1","status":"Killed"},{"id":"1109","location":{"end":{"column":25,"line":163},"start":{"column":5,"line":163}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1123","location":{"end":{"column":4,"line":176},"start":{"column":68,"line":173}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1122","location":{"end":{"column":67,"line":173},"start":{"column":64,"line":173}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"1124","location":{"end":{"column":24,"line":174},"start":{"column":16,"line":174}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1125","location":{"end":{"column":20,"line":174},"start":{"column":17,"line":174}},"mutatorName":"ArithmeticOperator","replacement":"i - 1","status":"Killed"},{"id":"1126","location":{"end":{"column":45,"line":183},"start":{"column":24,"line":183}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1131","location":{"end":{"column":37,"line":191},"start":{"column":15,"line":191}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1083","location":{"end":{"column":31,"line":123},"start":{"column":29,"line":123}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"1132","location":{"end":{"column":37,"line":191},"start":{"column":15,"line":191}},"mutatorName":"EqualityOperator","replacement":"i <= powerset_list.length","status":"Killed"},{"id":"1133","location":{"end":{"column":37,"line":191},"start":{"column":15,"line":191}},"mutatorName":"EqualityOperator","replacement":"i >= powerset_list.length","status":"Killed"},{"id":"1135","location":{"end":{"column":3,"line":234},"start":{"column":43,"line":191}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1134","location":{"end":{"column":42,"line":191},"start":{"column":39,"line":191}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"1136","location":{"end":{"column":60,"line":193},"start":{"column":36,"line":193}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1137","location":{"end":{"column":60,"line":193},"start":{"column":45,"line":193}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1139","location":{"end":{"column":4,"line":223},"start":{"column":32,"line":199}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1138","location":{"end":{"column":86,"line":196},"start":{"column":42,"line":196}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1140","location":{"end":{"column":5,"line":207},"start":{"column":51,"line":200}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1141","location":{"end":{"column":42,"line":203},"start":{"column":8,"line":203}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1142","location":{"end":{"column":42,"line":203},"start":{"column":8,"line":203}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1143","location":{"end":{"column":42,"line":203},"start":{"column":8,"line":203}},"mutatorName":"EqualityOperator","replacement":"fsm_node.get(symbol) === undefined","status":"Killed"},{"id":"1144","location":{"end":{"column":6,"line":205},"start":{"column":43,"line":203}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1145","location":{"end":{"column":14,"line":206},"start":{"column":12,"line":206}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"1147","location":{"end":{"column":114,"line":209},"start":{"column":55,"line":209}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1046","location":{"end":{"column":36,"line":89},"start":{"column":33,"line":89}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"1149","location":{"end":{"column":110,"line":209},"start":{"column":65,"line":209}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1150","location":{"end":{"column":110,"line":209},"start":{"column":65,"line":209}},"mutatorName":"EqualityOperator","replacement":"previous.toString() === (previous = v).toString()","status":"Killed"},{"id":"1151","location":{"end":{"column":19,"line":210},"start":{"column":7,"line":210}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1129","location":{"end":{"column":41,"line":185},"start":{"column":36,"line":185}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1130","location":{"end":{"column":26,"line":187},"start":{"column":24,"line":187}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"1153","location":{"end":{"column":19,"line":210},"start":{"column":7,"line":210}},"mutatorName":"BooleanLiteral","replacement":"next.length","status":"Killed"},{"id":"1127","location":{"end":{"column":46,"line":185},"start":{"column":34,"line":185}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1155","location":{"end":{"column":27,"line":214},"start":{"column":7,"line":214}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1128","location":{"end":{"column":45,"line":185},"start":{"column":35,"line":185}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1158","location":{"end":{"column":5,"line":217},"start":{"column":28,"line":214}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1159","location":{"end":{"column":5,"line":222},"start":{"column":9,"line":217}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1160","location":{"end":{"column":4,"line":227},"start":{"column":71,"line":224}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1146","location":{"end":{"column":19,"line":209},"start":{"column":17,"line":209}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"1162","location":{"end":{"column":4,"line":232},"start":{"column":55,"line":228}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1163","location":{"end":{"column":45,"line":230},"start":{"column":7,"line":230}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1152","location":{"end":{"column":19,"line":210},"start":{"column":7,"line":210}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1165","location":{"end":{"column":45,"line":230},"start":{"column":7,"line":230}},"mutatorName":"EqualityOperator","replacement":"fsms[fsm_i][substate].final.length !== 0","status":"Killed"},{"id":"1166","location":{"end":{"column":82,"line":230},"start":{"column":63,"line":230}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1167","location":{"end":{"column":62,"line":231},"start":{"column":11,"line":231}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1168","location":{"end":{"column":62,"line":231},"start":{"column":11,"line":231}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1154","location":{"end":{"column":33,"line":212},"start":{"column":30,"line":212}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1169","location":{"end":{"column":62,"line":231},"start":{"column":11,"line":231}},"mutatorName":"LogicalOperator","replacement":"fsm_i == fsms.length - 1 || fsms[fsm_i][substate].final","status":"Killed"},{"id":"1170","location":{"end":{"column":31,"line":231},"start":{"column":11,"line":231}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1171","location":{"end":{"column":31,"line":231},"start":{"column":11,"line":231}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1173","location":{"end":{"column":31,"line":231},"start":{"column":18,"line":231}},"mutatorName":"ArithmeticOperator","replacement":"fsms.length + 1","status":"Killed"},{"id":"1172","location":{"end":{"column":31,"line":231},"start":{"column":11,"line":231}},"mutatorName":"EqualityOperator","replacement":"fsm_i != fsms.length - 1","status":"Killed"},{"id":"1174","location":{"end":{"column":2,"line":252},"start":{"column":41,"line":240}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1175","location":{"end":{"column":16,"line":241},"start":{"column":14,"line":241}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"1176","location":{"end":{"column":34,"line":242},"start":{"column":15,"line":242}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1177","location":{"end":{"column":34,"line":242},"start":{"column":15,"line":242}},"mutatorName":"EqualityOperator","replacement":"i <= expression.length","status":"Killed"},{"id":"1178","location":{"end":{"column":34,"line":242},"start":{"column":15,"line":242}},"mutatorName":"EqualityOperator","replacement":"i >= expression.length","status":"Killed"},{"id":"1180","location":{"end":{"column":3,"line":249},"start":{"column":40,"line":242}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1181","location":{"end":{"column":15,"line":244},"start":{"column":6,"line":244}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1161","location":{"end":{"column":52,"line":226},"start":{"column":50,"line":226}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"1183","location":{"end":{"column":15,"line":244},"start":{"column":6,"line":244}},"mutatorName":"EqualityOperator","replacement":"chr !== '%'","status":"Killed"},{"id":"1164","location":{"end":{"column":45,"line":230},"start":{"column":7,"line":230}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1099","location":{"end":{"column":27,"line":144},"start":{"column":7,"line":144}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout"},{"id":"1186","location":{"end":{"column":44,"line":245},"start":{"column":11,"line":245}},"mutatorName":"ArithmeticOperator","replacement":"expression[i + 1] - expression[i + 2]","status":"Survived"},{"id":"1148","location":{"end":{"column":110,"line":209},"start":{"column":65,"line":209}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Timeout"},{"id":"1182","location":{"end":{"column":15,"line":244},"start":{"column":6,"line":244}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1189","location":{"end":{"column":41,"line":248},"start":{"column":21,"line":248}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1190","location":{"end":{"column":40,"line":248},"start":{"column":28,"line":248}},"mutatorName":"ArithmeticOperator","replacement":"fsm.length - 1","status":"Killed"},{"id":"1184","location":{"end":{"column":15,"line":244},"start":{"column":12,"line":244}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1191","location":{"end":{"column":64,"line":248},"start":{"column":43,"line":248}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1192","location":{"end":{"column":64,"line":248},"start":{"column":43,"line":248}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1194","location":{"end":{"column":32,"line":250},"start":{"column":28,"line":250}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"1193","location":{"end":{"column":64,"line":248},"start":{"column":43,"line":248}},"mutatorName":"LogicalOperator","replacement":"partial || partial(i)","status":"Killed"},{"id":"1195","location":{"end":{"column":2,"line":258},"start":{"column":21,"line":255}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1185","location":{"end":{"column":4,"line":247},"start":{"column":16,"line":244}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1198","location":{"end":{"column":27,"line":257},"start":{"column":15,"line":257}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1197","location":{"end":{"column":41,"line":256},"start":{"column":37,"line":256}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"1199","location":{"end":{"column":2,"line":315},"start":{"column":17,"line":261}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1201","location":{"end":{"column":21,"line":263},"start":{"column":18,"line":263}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1196","location":{"end":{"column":44,"line":256},"start":{"column":18,"line":256}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1200","location":{"end":{"column":68,"line":262},"start":{"column":29,"line":262}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1204","location":{"end":{"column":45,"line":268},"start":{"column":7,"line":268}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1205","location":{"end":{"column":45,"line":268},"start":{"column":7,"line":268}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1202","location":{"end":{"column":3,"line":280},"start":{"column":34,"line":265}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1203","location":{"end":{"column":4,"line":277},"start":{"column":37,"line":267}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1187","location":{"end":{"column":25,"line":245},"start":{"column":22,"line":245}},"mutatorName":"ArithmeticOperator","replacement":"i - 1","status":"Survived"},{"id":"1207","location":{"end":{"column":5,"line":270},"start":{"column":46,"line":268}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1208","location":{"end":{"column":44,"line":274},"start":{"column":7,"line":274}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1206","location":{"end":{"column":45,"line":268},"start":{"column":7,"line":268}},"mutatorName":"LogicalOperator","replacement":"f[substate] || f[substate].get(symbol)","status":"Killed"},{"id":"1210","location":{"end":{"column":44,"line":274},"start":{"column":7,"line":274}},"mutatorName":"LogicalOperator","replacement":"f[substate].final || f[0].get(symbol)","status":"Killed"},{"id":"1211","location":{"end":{"column":5,"line":276},"start":{"column":45,"line":274}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1212","location":{"end":{"column":21,"line":278},"start":{"column":6,"line":278}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1209","location":{"end":{"column":44,"line":274},"start":{"column":7,"line":274}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1214","location":{"end":{"column":21,"line":278},"start":{"column":6,"line":278}},"mutatorName":"EqualityOperator","replacement":"next.size !== 0","status":"Killed"},{"id":"1188","location":{"end":{"column":43,"line":245},"start":{"column":40,"line":245}},"mutatorName":"ArithmeticOperator","replacement":"i - 2","status":"Survived"},{"id":"1215","location":{"end":{"column":19,"line":279},"start":{"column":10,"line":279}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1216","location":{"end":{"column":3,"line":284},"start":{"column":23,"line":282}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1217","location":{"end":{"column":52,"line":283},"start":{"column":22,"line":283}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1218","location":{"end":{"column":31,"line":286},"start":{"column":22,"line":286}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1222","location":{"end":{"column":35,"line":291},"start":{"column":15,"line":291}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1223","location":{"end":{"column":35,"line":291},"start":{"column":15,"line":291}},"mutatorName":"EqualityOperator","replacement":"i <= states_list.length","status":"Killed"},{"id":"1224","location":{"end":{"column":35,"line":291},"start":{"column":15,"line":291}},"mutatorName":"EqualityOperator","replacement":"i >= states_list.length","status":"Killed"},{"id":"1225","location":{"end":{"column":40,"line":291},"start":{"column":37,"line":291}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"1226","location":{"end":{"column":3,"line":312},"start":{"column":41,"line":291}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1227","location":{"end":{"column":4,"line":310},"start":{"column":32,"line":296}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1228","location":{"end":{"column":23,"line":298},"start":{"column":7,"line":298}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1229","location":{"end":{"column":23,"line":298},"start":{"column":7,"line":298}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1230","location":{"end":{"column":23,"line":298},"start":{"column":7,"line":298}},"mutatorName":"EqualityOperator","replacement":"next !== undefined","status":"Killed"},{"id":"1156","location":{"end":{"column":27,"line":214},"start":{"column":7,"line":214}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout"},{"id":"1157","location":{"end":{"column":27,"line":214},"start":{"column":7,"line":214}},"mutatorName":"EqualityOperator","replacement":"nextId === undefined","status":"Timeout"},{"id":"1232","location":{"end":{"column":27,"line":301},"start":{"column":7,"line":301}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1234","location":{"end":{"column":27,"line":301},"start":{"column":7,"line":301}},"mutatorName":"EqualityOperator","replacement":"nextId === undefined","status":"Killed"},{"id":"1235","location":{"end":{"column":5,"line":304},"start":{"column":28,"line":301}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1236","location":{"end":{"column":5,"line":309},"start":{"column":9,"line":304}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1237","location":{"end":{"column":2,"line":374},"start":{"column":20,"line":319}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1238","location":{"end":{"column":68,"line":320},"start":{"column":29,"line":320}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1239","location":{"end":{"column":57,"line":321},"start":{"column":24,"line":321}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1240","location":{"end":{"column":84,"line":321},"start":{"column":66,"line":321}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1220","location":{"end":{"column":53,"line":287},"start":{"column":30,"line":287}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1242","location":{"end":{"column":84,"line":321},"start":{"column":71,"line":321}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1219","location":{"end":{"column":54,"line":287},"start":{"column":29,"line":287}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1244","location":{"end":{"column":33,"line":322},"start":{"column":24,"line":322}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1221","location":{"end":{"column":19,"line":288},"start":{"column":17,"line":288}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"1245","location":{"end":{"column":63,"line":323},"start":{"column":39,"line":323}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1246","location":{"end":{"column":62,"line":323},"start":{"column":40,"line":323}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1231","location":{"end":{"column":33,"line":299},"start":{"column":30,"line":299}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1249","location":{"end":{"column":37,"line":327},"start":{"column":15,"line":327}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1250","location":{"end":{"column":37,"line":327},"start":{"column":15,"line":327}},"mutatorName":"EqualityOperator","replacement":"i <= powerset_list.length","status":"Killed"},{"id":"1251","location":{"end":{"column":37,"line":327},"start":{"column":15,"line":327}},"mutatorName":"EqualityOperator","replacement":"i >= powerset_list.length","status":"Killed"},{"id":"1252","location":{"end":{"column":42,"line":327},"start":{"column":39,"line":327}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Killed"},{"id":"1253","location":{"end":{"column":3,"line":371},"start":{"column":43,"line":327}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1254","location":{"end":{"column":4,"line":350},"start":{"column":32,"line":332}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1255","location":{"end":{"column":5,"line":337},"start":{"column":41,"line":333}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1256","location":{"end":{"column":6,"line":336},"start":{"column":54,"line":334}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1257","location":{"end":{"column":39,"line":335},"start":{"column":13,"line":335}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1258","location":{"end":{"column":39,"line":335},"start":{"column":13,"line":335}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1259","location":{"end":{"column":39,"line":335},"start":{"column":13,"line":335}},"mutatorName":"EqualityOperator","replacement":"state.get(symbol) !== state0","status":"Killed"},{"id":"1260","location":{"end":{"column":34,"line":337},"start":{"column":14,"line":337}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1179","location":{"end":{"column":39,"line":242},"start":{"column":36,"line":242}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"1262","location":{"end":{"column":33,"line":337},"start":{"column":20,"line":337}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1213","location":{"end":{"column":21,"line":278},"start":{"column":6,"line":278}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1263","location":{"end":{"column":33,"line":337},"start":{"column":20,"line":337}},"mutatorName":"EqualityOperator","replacement":"v === undefined","status":"Killed"},{"id":"1264","location":{"end":{"column":22,"line":338},"start":{"column":7,"line":338}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1266","location":{"end":{"column":22,"line":338},"start":{"column":7,"line":338}},"mutatorName":"EqualityOperator","replacement":"next.length !== 0","status":"Killed"},{"id":"1267","location":{"end":{"column":33,"line":339},"start":{"column":30,"line":339}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1268","location":{"end":{"column":28,"line":341},"start":{"column":7,"line":341}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1265","location":{"end":{"column":22,"line":338},"start":{"column":7,"line":338}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1270","location":{"end":{"column":28,"line":341},"start":{"column":7,"line":341}},"mutatorName":"EqualityOperator","replacement":"nextIdx === undefined","status":"Killed"},{"id":"1271","location":{"end":{"column":5,"line":344},"start":{"column":29,"line":341}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1241","location":{"end":{"column":84,"line":321},"start":{"column":71,"line":321}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1272","location":{"end":{"column":5,"line":349},"start":{"column":9,"line":344}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1243","location":{"end":{"column":84,"line":321},"start":{"column":71,"line":321}},"mutatorName":"EqualityOperator","replacement":"v === undefined","status":"Killed"},{"id":"1275","location":{"end":{"column":36,"line":354},"start":{"column":7,"line":354}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1276","location":{"end":{"column":36,"line":354},"start":{"column":7,"line":354}},"mutatorName":"LogicalOperator","replacement":"tr.length <= 1 && tr[0] === '%'","status":"Killed"},{"id":"1247","location":{"end":{"column":57,"line":323},"start":{"column":54,"line":323}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1278","location":{"end":{"column":21,"line":354},"start":{"column":7,"line":354}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1279","location":{"end":{"column":21,"line":354},"start":{"column":7,"line":354}},"mutatorName":"EqualityOperator","replacement":"tr.length < 1","status":"Killed"},{"id":"1280","location":{"end":{"column":21,"line":354},"start":{"column":7,"line":354}},"mutatorName":"EqualityOperator","replacement":"tr.length > 1","status":"Killed"},{"id":"1248","location":{"end":{"column":19,"line":324},"start":{"column":17,"line":324}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"1273","location":{"end":{"column":4,"line":369},"start":{"column":31,"line":353}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1282","location":{"end":{"column":36,"line":354},"start":{"column":25,"line":354}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1274","location":{"end":{"column":36,"line":354},"start":{"column":7,"line":354}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1277","location":{"end":{"column":21,"line":354},"start":{"column":7,"line":354}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1286","location":{"end":{"column":5,"line":365},"start":{"column":31,"line":358}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1287","location":{"end":{"column":42,"line":359},"start":{"column":8,"line":359}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1281","location":{"end":{"column":36,"line":354},"start":{"column":25,"line":354}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1233","location":{"end":{"column":27,"line":301},"start":{"column":7,"line":301}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout"},{"id":"1289","location":{"end":{"column":42,"line":359},"start":{"column":8,"line":359}},"mutatorName":"EqualityOperator","replacement":"transitions[chr] !== transitions[tr]","status":"Killed"},{"id":"1285","location":{"end":{"column":23,"line":355},"start":{"column":19,"line":355}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"1292","location":{"end":{"column":25,"line":362},"start":{"column":8,"line":362}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1293","location":{"end":{"column":25,"line":362},"start":{"column":8,"line":362}},"mutatorName":"BooleanLiteral","replacement":"transitions[chr]","status":"Killed"},{"id":"1284","location":{"end":{"column":36,"line":354},"start":{"column":33,"line":354}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1294","location":{"end":{"column":6,"line":364},"start":{"column":26,"line":362}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1295","location":{"end":{"column":22,"line":363},"start":{"column":17,"line":363}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"1296","location":{"end":{"column":15,"line":366},"start":{"column":7,"line":366}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1283","location":{"end":{"column":36,"line":354},"start":{"column":25,"line":354}},"mutatorName":"EqualityOperator","replacement":"tr[0] !== '%'","status":"Killed"},{"id":"1299","location":{"end":{"column":77,"line":370},"start":{"column":41,"line":370}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1261","location":{"end":{"column":33,"line":337},"start":{"column":20,"line":337}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Timeout"},{"id":"1300","location":{"end":{"column":77,"line":370},"start":{"column":41,"line":370}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1301","location":{"end":{"column":77,"line":370},"start":{"column":41,"line":370}},"mutatorName":"EqualityOperator","replacement":"powerset_combination.indexOf(0) > 0","status":"Killed"},{"id":"1302","location":{"end":{"column":77,"line":370},"start":{"column":41,"line":370}},"mutatorName":"EqualityOperator","replacement":"powerset_combination.indexOf(0) < 0","status":"Killed"},{"id":"1303","location":{"end":{"column":2,"line":379},"start":{"column":19,"line":377}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1304","location":{"end":{"column":2,"line":398},"start":{"column":23,"line":382}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1305","location":{"end":{"column":22,"line":383},"start":{"column":5,"line":383}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1307","location":{"end":{"column":22,"line":383},"start":{"column":5,"line":383}},"mutatorName":"EqualityOperator","replacement":"fsms.length === 2","status":"Killed"},{"id":"1291","location":{"end":{"column":25,"line":362},"start":{"column":8,"line":362}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1309","location":{"end":{"column":47,"line":384},"start":{"column":19,"line":384}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1310","location":{"end":{"column":23,"line":386},"start":{"column":19,"line":386}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"1288","location":{"end":{"column":42,"line":359},"start":{"column":8,"line":359}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1311","location":{"end":{"column":40,"line":386},"start":{"column":36,"line":386}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"1313","location":{"end":{"column":3,"line":395},"start":{"column":30,"line":389}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1312","location":{"end":{"column":59,"line":386},"start":{"column":55,"line":386}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"1314","location":{"end":{"column":13,"line":392},"start":{"column":6,"line":392}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1315","location":{"end":{"column":13,"line":392},"start":{"column":6,"line":392}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1316","location":{"end":{"column":13,"line":392},"start":{"column":6,"line":392}},"mutatorName":"LogicalOperator","replacement":"!a || b","status":"Killed"},{"id":"1318","location":{"end":{"column":33,"line":392},"start":{"column":28,"line":392}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"1317","location":{"end":{"column":8,"line":392},"start":{"column":6,"line":392}},"mutatorName":"BooleanLiteral","replacement":"a","status":"Killed"},{"id":"1319","location":{"end":{"column":13,"line":393},"start":{"column":6,"line":393}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1320","location":{"end":{"column":13,"line":393},"start":{"column":6,"line":393}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1322","location":{"end":{"column":13,"line":393},"start":{"column":11,"line":393}},"mutatorName":"BooleanLiteral","replacement":"b","status":"Killed"},{"id":"1321","location":{"end":{"column":13,"line":393},"start":{"column":6,"line":393}},"mutatorName":"LogicalOperator","replacement":"a || !b","status":"Killed"},{"id":"1323","location":{"end":{"column":31,"line":393},"start":{"column":26,"line":393}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"1269","location":{"end":{"column":28,"line":341},"start":{"column":7,"line":341}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout"},{"id":"1324","location":{"end":{"column":16,"line":394},"start":{"column":6,"line":394}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1325","location":{"end":{"column":16,"line":394},"start":{"column":6,"line":394}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1327","location":{"end":{"column":9,"line":394},"start":{"column":6,"line":394}},"mutatorName":"BooleanLiteral","replacement":"!a","status":"Killed"},{"id":"1326","location":{"end":{"column":16,"line":394},"start":{"column":6,"line":394}},"mutatorName":"LogicalOperator","replacement":"!!a || !!b","status":"Killed"},{"id":"1328","location":{"end":{"column":9,"line":394},"start":{"column":7,"line":394}},"mutatorName":"BooleanLiteral","replacement":"a","status":"Killed"},{"id":"1290","location":{"end":{"column":6,"line":361},"start":{"column":43,"line":359}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1332","location":{"end":{"column":43,"line":397},"start":{"column":9,"line":397}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1331","location":{"end":{"column":36,"line":394},"start":{"column":31,"line":394}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"1329","location":{"end":{"column":16,"line":394},"start":{"column":13,"line":394}},"mutatorName":"BooleanLiteral","replacement":"!b","status":"Killed"},{"id":"1330","location":{"end":{"column":16,"line":394},"start":{"column":14,"line":394}},"mutatorName":"BooleanLiteral","replacement":"b","status":"Killed"},{"id":"1297","location":{"end":{"column":15,"line":366},"start":{"column":7,"line":366}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1298","location":{"end":{"column":5,"line":368},"start":{"column":16,"line":366}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1306","location":{"end":{"column":22,"line":383},"start":{"column":5,"line":383}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1308","location":{"end":{"column":3,"line":385},"start":{"column":23,"line":383}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"'use strict';\n\nmodule.exports.range = range;\nfunction *range(str){\n\tfor(var i=0; i<str.length; i++){\n\t\tconst chr = str[i];\n\t\tif(chr !== '-' && str[i+1]==='-' && str[i+2]){\n\t\t\tfor(var j=str.charCodeAt(i), end=str.charCodeAt(i+2); j<=end; j++){\n\t\t\t\tyield String.fromCharCode(j);\n\t\t\t}\n\t\t\ti += 2;\n\t\t}else{\n\t\t\tyield chr;\n\t\t}\n\t}\n}\n\nconst rangeSets = new Map;\n\n// A node on the tree is a list of various options to try to match against an input character.\n// The \"next\" and \"list_set\" options specify another branch to also try and match against the current input character.\n// The \"template_match\" option specifies the end of the template was reached, and to return a successful match result. This is usually only reachable immediately after matching an EOF.\nmodule.exports.Node = Node;\nfunction Node(transitions, partials, final){\n\tif(typeof partials === 'number') throw new Error;\n\tpartials = partials || {};\n\tthis.transitions = transitions || {};\n\t// if(Object.keys(partials).length===0){\n\t// \tthrow new Error('Expected partial match info');\n\t// }\n\t// Maps final state -> information about the meaning of this transition given the final state\n\tthis.partials = partials || {};\n\t// If we reach this branch, declare a match for this template\n\tthis.final = final || false;\n\tthis.classes = Object.keys(transitions).filter(v => v.length>1).sort((a,b) => a.length-b.length);\n}\n\nNode.prototype.get = function get(chr){\n\tif(this.transitions[chr] !== undefined){\n\t\treturn this.transitions[chr];\n\t}\n\t// If the chr is a pct-encoded sequence and there's no individual transition,\n\t// then it matches a character class transition if defined\n\tif(chr[0]==='%' && chr.length===3){\n\t\tif(this.transitions[\"-.0-9A-Z_a-z~\"] !== undefined){\n\t\t\treturn this.transitions[\"-.0-9A-Z_a-z~\"];\n\t\t}else if(this.transitions[\"-.0-9A-Z_a-z~:/?#[]@!$&'()*+,;=\"] !== undefined){\n\t\t\treturn this.transitions[\"-.0-9A-Z_a-z~:/?#[]@!$&'()*+,;=\"];\n\t\t}\n\t}\n\tfor(const tr of this.classes){\n\t\tif(!rangeSets.has(tr)){\n\t\t\trangeSets.set(tr, new Set(range(tr)));\n\t\t}\n\t\tif(rangeSets.get(tr).has(chr)){\n\t\t\treturn this.transitions[tr];\n\t\t}\n\t}\n\t// FIXME this is a huge hack that does not scale to multiple character classes\n\tif(chr === \"-.0-9A-Z_a-z~\" && this.transitions[\"-.0-9A-Z_a-z~:/?#[]@!$&'()*+,;=\"]!==undefined){\n\t\treturn this.transitions[\"-.0-9A-Z_a-z~:/?#[]@!$&'()*+,;=\"];\n\t}\n};\n\nmodule.exports.verify = verify;\nfunction verify(fsm){\n\tif(!Array.isArray(fsm)){\n\t\tthrow new Error('Expected `fsm` to be an Array');\n\t}\n\tfsm.forEach(function(st, i){\n\t\tif(typeof st !== 'object'){\n\t\t\tthrow new Error('Expected fsm[i] to be an object');\n\t\t}\n\t\tfor(var symbol in st.transitions){\n\t\t\tif(typeof st.transitions[symbol] !== 'number'){\n\t\t\t\tthrow new Error('Expected fsm['+JSON.stringify(i)+']['+JSON.stringify(symbol)+'] to be a number, got '+typeof st[symbol]);\n\t\t\t}\n\t\t\tif(st.transitions[symbol] >= fsm.length){\n\t\t\t\tthrow new Error('Expected fsm['+JSON.stringify(i)+']['+JSON.stringify(symbol)+'] to be a state in `fsm`');\n\t\t\t}\n\t\t}\n\t});\n}\n\nmodule.exports.union = union;\nfunction union(fsms, ordering){\n\tfunction partial_union(states){\n\t\tconst map = {};\n\t\tfor(var i=0; i<states.length; i++){\n\t\t\tif(states[i]===undefined) continue;\n\t\t\tfor(var k in states[i].partials){\n\t\t\t\tmap[k] = states[i].partials[k];\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n\tfunction final_union(states){\n\t\tfunction sort_final(a, b){\n\t\t\treturn ordering.get(a.route) - ordering.get(b.route);\n\t\t}\n\t\tif(states.some(final => final && (Array.isArray(final) ? final.length : final))){\n\t\t\tconst items = states.flatMap(final => (final && Array.isArray(final)) ? final : []);\n\t\t\tif(ordering) items.sort(sort_final);\n\t\t\treturn items.length ? items : true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn parallel(fsms, partial_union, final_union);\n}\n\n\nmodule.exports.parallel = parallel;\nfunction parallel(fsms, partial, final){\n\tif(!Array.isArray(fsms)) throw new Error('Expected `fsms` to be an array of arrays');\n\tfsms.forEach(verify);\n\n\t// By convention, start on the 0 state\n\tconst cross_product_list = [ fsms.map(v=>0) ];\n\t// A handy mapping of each cross-product state to its new state\n\tconst cross_product_map = new Map([[fsms.map(v=>0).join(','), 0]]);\n\t// The new states\n\tconst combination_states = [];\n\n\t// iterate over a growing list\n\tfor(var i=0; i<cross_product_list.length; i++){\n\t\tconst state_i = cross_product_list[i];\n\t\tconst state = state_i.map( (i,j) => fsms[j][i] );\n\t\t\n\t\t// Compute the symbols used by each state\n\t\t// const alphabet = new Set(fsms.flatMap(v => [...v.transitions.keys()]));\n\t\tconst alphabet = new Set(state.flatMap(fsm_st => fsm_st ? Object.keys(fsm_st.transitions) : []));\n\n\t\t// compute map for this state\n\t\tconst transitions = {};\n\t\tfor(const symbol of alphabet){\n\t\t\tconst next = state.map(function(fsm_st){\n\t\t\t\t// Returning undefined is OK\n\t\t\t\treturn fsm_st && fsm_st.get(symbol);\n\t\t\t});\n\t\t\t// Generate a key name for this cross-product\n\t\t\tconst nextKey = next.join(',');\n\t\t\tconst nextId = cross_product_map.get(nextKey);\n\t\t\tif(nextId !== undefined){\n\t\t\t\t// If there is already a state representing this cross-product, point to that\n\t\t\t\ttransitions[symbol] = nextId;\n\t\t\t}else{\n\t\t\t\t// Create a new state\n\t\t\t\ttransitions[symbol] = cross_product_list.length;\n\t\t\t\tcross_product_map.set(nextKey, cross_product_list.length);\n\t\t\t\tcross_product_list.push(next);\n\t\t\t}\n\t\t}\n\n\t\tcombination_states[i] = new Node(transitions, partial(state), final(state.map(v => v && v.final)));\n\t}\n\n\treturn combination_states;\n}\n\nmodule.exports.concat = concat;\nfunction concat(fsms){\n\tif(!Array.isArray(fsms)) throw new Error('Expected `fsms` to be an array of arrays');\n\tfsms.forEach(verify);\n\n\tfunction connect_all(fsm_i, substate){\n\t\t/*\n\t\t\tTake a state in the numbered FSM and return a set containing it, plus\n\t\t\t(if it's final) the first state from the next FSM, plus (if that's\n\t\t\tfinal) the first state from the next but one FSM, plus...\n\t\t*/\n\t\tconst result = [ [fsm_i, substate] ];\n\t\tfor(var i=fsm_i; i<fsms.length-1 && fsms[i][substate].final; i++){\n\t\t\tresult.push([i+1, 0]);\n\t\t\tsubstate = 0;\n\t\t}\n\t\t// TODO Ignore states that have no outgoing transitions\n\t\treturn result.sort();\n\t}\n\t\n\t// Maps new state ids to one of the items in the powerset\n\t// Start with the first fsm's (0) initial state (0)\n\tconst powerset_list = [ connect_all(0, 0) ];\n\t// A handy mapping of each cross-product state to its new state\n\tconst powetset_id_map = new Map([['0,0', 0]]);\n\t// The new fsm after concatenation\n\tconst concat_states = [];\n\n\n\t// iterate over a growing list\n\tfor(var i=0; i<powerset_list.length; i++){\n\t\tconst powetset_item = powerset_list[i];\n\t\tconst state = powetset_item.map( ([j,i])=>[j, fsms[j][i]] );\n\t\t\n\t\t// Compute the symbols used by each state\n\t\tconst alphabet = new Set(state.flatMap(fsm_st => Object.keys(fsm_st[1].transitions)));\n\t\t// compute map for this state\n\t\tconst transitions = {};\n\t\tfor(const symbol of alphabet){\n\t\t\tconst next_all = state.flatMap(function(fsm_st){\n\t\t\t\tconst [fsm_i, fsm_node] = fsm_st;\n\t\t\t\t// returning undefined is OK\n\t\t\t\tif(fsm_node.get(symbol) !== undefined){\n\t\t\t\t\treturn connect_all(fsm_i, fsm_node.get(symbol));\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}).sort();\n\t\t\t// Remove duplicates\n\t\t\tvar previous='', next = next_all.filter(function(v){ return (previous.toString()!==(previous=v).toString()); });\n\t\t\tif(!next.length) continue;\n\t\t\t// Generate a key name for this cross-product\n\t\t\tconst nextKey = next.join(',');\n\t\t\tconst nextId = powetset_id_map.get(nextKey);\n\t\t\tif(nextId !== undefined){\n\t\t\t\t// Use an existing state representing this cross-product, if available\n\t\t\t\ttransitions[symbol] = nextId;\n\t\t\t}else{\n\t\t\t\t// Create a state for a new cross-product combination\n\t\t\t\ttransitions[symbol] = powerset_list.length;\n\t\t\t\tpowetset_id_map.set(nextKey, powerset_list.length);\n\t\t\t\tpowerset_list.push(next);\n\t\t\t}\n\t\t}\n\t\tconst partial_matches = Object.fromEntries(state.flatMap(function(v){\n\t\t\tconst [_, part] = v;\n\t\t\treturn part ? Object.entries(part.partials) : [];\n\t\t}));\n\t\tconst final = powetset_item.some(function(state_val){\n\t\t\tconst [fsm_i, substate] = state_val;\n\t\t\tif(fsms[fsm_i][substate].final.length===0) throw new Error('Zero-length final');\n\t\t\treturn fsm_i==fsms.length-1 && fsms[fsm_i][substate].final;\n\t\t});\n\t\tconcat_states[i] = new Node(transitions, partial_matches, final);\n\t}\n\treturn concat_states;\n}\n\n\nmodule.exports.fromString = fromString;\nfunction fromString(expression, partial){\n\tconst fsm = [];\n\tfor(var i=0; i<expression.length; i++){\n\t\tvar chr = expression[i];\n\t\tif(chr==='%'){\n\t\t\tchr += expression[i+1] + expression[i+2];\n\t\t\ti += 2;\n\t\t}\n\t\tfsm.push(new Node({[chr]:fsm.length+1}, partial && partial(i)));\n\t}\n\tfsm.push(new Node({}, {}, true));\n\treturn fsm;\n}\n\nmodule.exports.optional = optional;\nfunction optional(f){\n\tconst epsilon = [ new Node({}, {}, true) ];\n\treturn union([f, epsilon]);\n}\n\nmodule.exports.star = star;\nfunction star(f){\n\tconst alphabet = f.flatMap(state => Object.keys(state.transitions));\n\tconst initial = [0];\n\n\tfunction follow(current, symbol){\n\t\tconst next = new Set();\n\t\tcurrent.forEach(function(substate){\n\t\t\tif(f[substate] && f[substate].get(symbol)){\n\t\t\t\tnext.add(f[substate].get(symbol));\n\t\t\t}\n\n\t\t\t// If one of our substates is final, then we can also consider\n\t\t\t// transitions from the initial state of the original FSM.\n\t\t\tif(f[substate].final && f[0].get(symbol)){\n\t\t\t\tnext.add(f[0].get(symbol));\n\t\t\t}\n\t\t});\n\t\tif(next.size === 0) return;\n\t\treturn [...next].sort();\n\t}\n\n\tfunction final(state){\n\t\treturn state.some( (substate)=> f[substate].final );\n\t}\n\n\tconst states_list = [initial];\n\tconst states_map = new Map([[initial.toString(), 0]]);\n\tconst states = [];\n\n\t// iterate over a growing list\n\tfor(var i=0; i<states_list.length; i++){\n\t\tconst state = states_list[i];\n\t\t\n\t\t// compute map for this state\n\t\tconst transitions = {};\n\t\tfor(const symbol of alphabet){\n\t\t\tconst next = follow(state, symbol);\n\t\t\tif(next===undefined) continue;\n\t\t\tconst nextKey = next.join(',');\n\t\t\tconst nextId = states_map.get(nextKey);\n\t\t\tif(nextId !== undefined){\n\t\t\t\t// If there is already a state representing this cross-product, point to that\n\t\t\t\ttransitions[symbol] = nextId;\n\t\t\t}else{\n\t\t\t\t// Create a new state\n\t\t\t\ttransitions[symbol] = states_list.length;\n\t\t\t\tstates_map.set(nextKey, states_list.length);\n\t\t\t\tstates_list.push(next);\n\t\t\t}\n\t\t}\n\t\tstates[i] = new Node(transitions, {}, final(state));\n\t}\n\n\treturn optional(states);\n}\n\n// This probably isn't needed\nmodule.exports.reverse = reverse;\nfunction reverse(f){\n\tconst alphabet = f.flatMap(state => Object.keys(state.transitions));\n\tconst initial = f.map((v, i) => v.final ? i : undefined).filter(v => v!==undefined);\n\tconst powerset_list = [initial];\n\tconst powerset_stateid_map = new Map([[initial.join(','), 0]]);\n\tconst states = []; // states[0] will be filled in by the first iteration of this loop\n\n\t// iterate over a growing list\n\tfor(var i=0; i<powerset_list.length; i++){\n\t\tconst powerset_combination = powerset_list[i];\n\n\t\t// compute map for this state\n\t\tconst transitions = {};\n\t\tfor(const symbol of alphabet){\n\t\t\tconst next = f.map(function(state, i){\n\t\t\t\treturn powerset_combination.some(function(state0){\n\t\t\t\t\treturn state.get(symbol)===state0;\n\t\t\t\t}) ? i : undefined;\n\t\t\t}).filter(v => (v!==undefined)).sort();\n\t\t\tif(next.length===0) continue;\n\t\t\tconst nextKey = next.join(',');\n\t\t\tconst nextIdx = powerset_stateid_map.get(nextKey);\n\t\t\tif(nextIdx !== undefined){\n\t\t\t\t// If there is already a state with identical transitions, point to that\n\t\t\t\ttransitions[symbol] = nextIdx;\n\t\t\t}else{\n\t\t\t\t// Create a new state\n\t\t\t\ttransitions[symbol] = powerset_list.length;\n\t\t\t\tpowerset_stateid_map.set(nextKey, powerset_list.length);\n\t\t\t\tpowerset_list.push(next);\n\t\t\t}\n\t\t}\n\n\t\t// Trim character transitions that are the same as the group transition\n\t\tfor(const tr in transitions){\n\t\t\tif(tr.length <= 1 || tr[0]==='%') continue;\n\t\t\tvar shadowed = true;\n\t\t\t// TODO trim pct-encoded sequences that are the same as the character class\n\t\t\t// And trim character classes that are the same as larger character classes\n\t\t\tfor(const chr of range(tr)){\n\t\t\t\tif(transitions[chr]===transitions[tr]){\n\t\t\t\t\tdelete transitions[chr];\n\t\t\t\t}\n\t\t\t\tif(!transitions[chr]){\n\t\t\t\t\tshadowed = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(shadowed){\n\t\t\t\tdelete transitions[tr];\n\t\t\t}\n\t\t}\n\t\tstates[i] = new Node(transitions, {}, powerset_combination.indexOf(0) >= 0);\n\t}\n\n\treturn states;\n}\n\nmodule.exports.reduce = reduce;\nfunction reduce(f){\n\treturn reverse(reverse(f));\n}\n\nmodule.exports.compare = compare;\nfunction compare(fsms){\n\tif(fsms.length !== 2){\n\t\tthrow new Error('Expected 2 fsms to compare');\n\t}\n\tvar isSuperset = true, isSubset = true, isDisjoint = true;\n\tfunction partial_union(states){\n\t}\n\tfunction final_union(states){\n\t\tconst a = Array.isArray(states[0]) ? states[0].length : states[0];\n\t\tconst b = Array.isArray(states[1]) ? states[1].length : states[1];\n\t\tif(!a && b) isSuperset = false;\n\t\tif(a && !b) isSubset = false;\n\t\tif(!!a && !!b) isDisjoint = false; // set to false when there are some final elements in common\n\t}\n\tparallel(fsms, partial_union, final_union);\n\treturn [isSuperset, isSubset, isDisjoint];\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};