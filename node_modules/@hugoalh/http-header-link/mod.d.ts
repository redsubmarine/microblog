/**
 * HTTP header `Link` entry.
 */
export type HTTPHeaderLinkEntry = [
    uri: string,
    parameters: {
        [key: string]: string;
    }
];
/**
 * Handle the HTTP header `Link` according to the specification RFC 8288.
 */
export declare class HTTPHeaderLink {
    #private;
    get [Symbol.toStringTag](): string;
    /**
     * Handle the HTTP header `Link` according to the specification RFC 8288.
     * @param {...(string | Headers | HTTPHeaderLink | HTTPHeaderLinkEntry[] | Response)} inputs Input.
     */
    constructor(...inputs: (string | Headers | HTTPHeaderLink | HTTPHeaderLinkEntry[] | Response)[]);
    /**
     * Add entries.
     * @param {...(string | Headers | HTTPHeaderLink | HTTPHeaderLinkEntry[] | Response)} inputs Input.
     * @returns {this}
     */
    add(...inputs: (string | Headers | HTTPHeaderLink | HTTPHeaderLinkEntry[] | Response)[]): this;
    /**
     * Return all of the entries.
     * @returns {HTTPHeaderLinkEntry[]} Entries.
     */
    entries(): HTTPHeaderLinkEntry[];
    /**
     * Get entries by parameter.
     * @param {string} key Key of the parameter.
     * @param {string} value Value of the parameter.
     * @returns {HTTPHeaderLinkEntry[]} Entries which match the parameter.
     */
    getByParameter(key: string, value: string): HTTPHeaderLinkEntry[];
    /**
     * Get entries by parameter `rel`.
     * @param {string} value Value of the parameter `rel`.
     * @returns {HTTPHeaderLinkEntry[]} Entries which match the parameter.
     */
    getByRel(value: string): HTTPHeaderLinkEntry[];
    /**
     * Whether have entries that match parameter.
     * @param {string} key Key of the parameter.
     * @param {string} value Value of the parameter.
     * @returns {boolean} Determine result.
     */
    hasParameter(key: string, value: string): boolean;
    /**
     * Stringify entries.
     * @returns {string} Stringified entries.
     */
    toString(): string;
    /**
     * Parse the HTTP header `Link` according to the specification RFC 8288.
     * @param {...(string | Headers | HTTPHeaderLink | HTTPHeaderLinkEntry[] | Response)} inputs Input.
     * @returns {HTTPHeaderLink}
     */
    static parse(...inputs: (string | Headers | HTTPHeaderLink | HTTPHeaderLinkEntry[] | Response)[]): HTTPHeaderLink;
    /**
     * Stringify as the HTTP header `Link` according to the specification RFC 8288.
     * @param {...(string | Headers | HTTPHeaderLink | HTTPHeaderLinkEntry[] | Response)} inputs Input.
     * @returns {string}
     */
    static stringify(...inputs: (string | Headers | HTTPHeaderLink | HTTPHeaderLinkEntry[] | Response)[]): string;
}
export default HTTPHeaderLink;
//# sourceMappingURL=mod.d.ts.map