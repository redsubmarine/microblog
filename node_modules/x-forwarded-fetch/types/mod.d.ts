/// <reference types="node" />
/**
 * A type for `fetch()` function.
 */
export type Fetch = (request: Request) => Promise<Response> | Response;
/**
 * A middleware for `fetch()` behind a reverse proxy with `X-Forwarded-*`
 * headers.  Decorated `fetch()` function will apply `X-Forwarded-*` headers
 * to the request object so that the request has the same URL and host as the
 * original request from the client.
 * @param fetch A `fetch()` function to be decorated.
 * @returns A decorated `fetch()` function.
 */
export declare function behindProxy(fetch: Fetch): Fetch;
/**
 * Returns a new {@link Request} object with `X-Forwarded-*` headers applied.
 * @param request A request object to be transformed.
 * @returns A new request object with `X-Forwarded-*` headers applied.
 */
export declare function getXForwardedRequest(request: Request): Promise<Request>;
//# sourceMappingURL=mod.d.ts.map