"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getXForwardedRequest = exports.behindProxy = void 0;
/**
 * A middleware for `fetch()` behind a reverse proxy with `X-Forwarded-*`
 * headers.  Decorated `fetch()` function will apply `X-Forwarded-*` headers
 * to the request object so that the request has the same URL and host as the
 * original request from the client.
 * @param fetch A `fetch()` function to be decorated.
 * @returns A decorated `fetch()` function.
 */
function behindProxy(fetch) {
    return async (request) => await fetch(await getXForwardedRequest(request));
}
exports.behindProxy = behindProxy;
/**
 * Returns a new {@link Request} object with `X-Forwarded-*` headers applied.
 * @param request A request object to be transformed.
 * @returns A new request object with `X-Forwarded-*` headers applied.
 */
async function getXForwardedRequest(request) {
    const url = new URL(request.url);
    const headers = new Headers(request.headers);
    const proto = request.headers.get("X-Forwarded-Proto");
    if (proto != null) {
        url.protocol = `${proto}:`;
        headers.delete("X-Forwarded-Proto");
    }
    const host = request.headers.get("X-Forwarded-Host");
    if (host != null) {
        url.host = host;
        const portMatch = host.match(/:(\d+)$/);
        if (portMatch)
            url.port = portMatch[1];
        else
            url.port = "";
        headers.delete("X-Forwarded-Host");
        headers.delete("Host");
        headers.set("Host", host);
    }
    return new Request(url, {
        method: request.method,
        headers,
        body: request.method === "GET" || request.method === "HEAD"
            ? undefined
            : await request.blob(),
        // @ts-ignore: TS2353
        referrer: "referrer" in request ? request.referrer : undefined,
        // deno-lint-ignore no-explicit-any
        referrerPolicy: request.referrerPolicy,
        mode: request.mode,
        credentials: request.credentials,
        // @ts-ignore: TS2353
        cache: request.cache,
        redirect: request.redirect,
        integrity: request.integrity,
        keepalive: request.keepalive,
        signal: request.signal,
    });
}
exports.getXForwardedRequest = getXForwardedRequest;
