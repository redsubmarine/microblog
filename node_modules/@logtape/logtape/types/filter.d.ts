import type { LogLevel } from "./level.js";
import type { LogRecord } from "./record.js";
/**
 * A filter is a function that accepts a log record and returns `true` if the
 * record should be passed to the sink.
 *
 * @param record The log record to filter.
 * @returns `true` if the record should be passed to the sink.
 */
export type Filter = (record: LogRecord) => boolean;
/**
 * A filter-like value is either a {@link Filter} or a {@link LogLevel}.
 * `null` is also allowed to represent a filter that rejects all records.
 */
export type FilterLike = Filter | LogLevel | null;
/**
 * Converts a {@link FilterLike} value to an actual {@link Filter}.
 *
 * @param filter The filter-like value to convert.
 * @returns The actual filter.
 */
export declare function toFilter(filter: FilterLike): Filter;
/**
 * Returns a filter that accepts log records with the specified level.
 *
 * @param level The level to filter by.  If `null`, the filter will reject all
 *              records.
 * @returns The filter.
 */
export declare function getLevelFilter(level: LogLevel | null): Filter;
//# sourceMappingURL=filter.d.ts.map