/**
 * Converts a {@link FilterLike} value to an actual {@link Filter}.
 *
 * @param filter The filter-like value to convert.
 * @returns The actual filter.
 */
export function toFilter(filter) {
    if (typeof filter === "function")
        return filter;
    return getLevelFilter(filter);
}
/**
 * Returns a filter that accepts log records with the specified level.
 *
 * @param level The level to filter by.  If `null`, the filter will reject all
 *              records.
 * @returns The filter.
 */
export function getLevelFilter(level) {
    if (level == null)
        return () => false;
    if (level === "fatal") {
        return (record) => record.level === "fatal";
    }
    else if (level === "error") {
        return (record) => record.level === "fatal" || record.level === "error";
    }
    else if (level === "warning") {
        return (record) => record.level === "fatal" ||
            record.level === "error" ||
            record.level === "warning";
    }
    else if (level === "info") {
        return (record) => record.level === "fatal" ||
            record.level === "error" ||
            record.level === "warning" ||
            record.level === "info";
    }
    else if (level === "debug")
        return () => true;
    throw new TypeError(`Invalid log level: ${level}.`);
}
