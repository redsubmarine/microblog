"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withContext = withContext;
const logger_js_1 = require("./logger.js");
/**
 * Runs a callback with the given implicit context.  Every single log record
 * in the callback will have the given context.
 *
 * If no `contextLocalStorage` is configured, this function does nothing and
 * just returns the return value of the callback.  It also logs a warning to
 * the `["logtape", "meta"]` logger in this case.
 * @param context The context to inject.
 * @param callback The callback to run.
 * @returns The return value of the callback.
 * @since 0.7.0
 */
function withContext(context, callback) {
    const rootLogger = logger_js_1.LoggerImpl.getLogger();
    if (rootLogger.contextLocalStorage == null) {
        logger_js_1.LoggerImpl.getLogger(["logtape", "meta"]).warn("Context-local storage is not configured.  " +
            "Specify contextLocalStorage option in the configure() function.");
        return callback();
    }
    const parentContext = rootLogger.contextLocalStorage.getStore() ?? {};
    return rootLogger.contextLocalStorage.run({ ...parentContext, ...context }, callback);
}
