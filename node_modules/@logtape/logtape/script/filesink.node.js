"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeDriver = void 0;
exports.getFileSink = getFileSink;
exports.getRotatingFileSink = getRotatingFileSink;
const dntShim = __importStar(require("./_dnt.shims.js"));
// @ts-ignore: a trick to avoid module resolution error on non-Node.js environ
const fs_js_1 = __importDefault(require("./fs.js"));
const filesink_web_js_1 = require("./filesink.web.js");
const sink_js_1 = require("./sink.js");
// @ts-ignore: a trick to avoid module resolution error on non-Node.js environ
const fs = fs_js_1.default;
/**
 * A Node.js-specific file sink driver.
 */
exports.nodeDriver = fs == null
    ? filesink_web_js_1.webDriver
    : {
        openSync(path) {
            return fs.openSync(path, "a");
        },
        writeSync: fs.writeSync,
        flushSync: fs.fsyncSync,
        closeSync: fs.closeSync,
        statSync: fs.statSync,
        renameSync: fs.renameSync,
    };
/**
 * Get a file sink.
 *
 * Note that this function is unavailable in the browser.
 *
 * @param path A path to the file to write to.
 * @param options The options for the sink.
 * @returns A sink that writes to the file.  The sink is also a disposable
 *          object that closes the file when disposed.
 */
function getFileSink(path, options = {}) {
    if ("document" in dntShim.dntGlobalThis) {
        return (0, sink_js_1.getFileSink)(path, { ...options, ...filesink_web_js_1.webDriver });
    }
    return (0, sink_js_1.getFileSink)(path, { ...options, ...exports.nodeDriver });
}
/**
 * Get a rotating file sink.
 *
 * This sink writes log records to a file, and rotates the file when it reaches
 * the `maxSize`.  The rotated files are named with the original file name
 * followed by a dot and a number, starting from 1.  The number is incremented
 * for each rotation, and the maximum number of files to keep is `maxFiles`.
 *
 * Note that this function is unavailable in the browser.
 *
 * @param path A path to the file to write to.
 * @param options The options for the sink and the file driver.
 * @returns A sink that writes to the file.  The sink is also a disposable
 *          object that closes the file when disposed.
 */
function getRotatingFileSink(path, options = {}) {
    if ("document" in dntShim.dntGlobalThis) {
        return (0, sink_js_1.getRotatingFileSink)(path, { ...options, ...filesink_web_js_1.webDriver });
    }
    return (0, sink_js_1.getRotatingFileSink)(path, { ...options, ...exports.nodeDriver });
}
// cSpell: ignore filesink
